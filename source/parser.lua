
--[[

This file was generated by the "C - Kessels engine template.c" template.

]]

-- <Decls> ::= <Imports> <Using Stms> <Decl List> 
function Rule_Decls(token, expr)
  -- TODO: Rule_Decls
end


-- <Decls> ::=  
function Rule_Decls2(token, expr)
  -- TODO: Rule_Decls2
end


-- <Decl List> ::= <Decl> <Decl List> 
function Rule_DeclList(token, expr)
  -- TODO: Rule_DeclList
end


-- <Decl List> ::= <Decl> 
function Rule_DeclList2(token, expr)
  -- TODO: Rule_DeclList2
end


-- <Decl> ::= <Func Decl> 
function Rule_Decl(token, expr)
  -- TODO: Rule_Decl
end


-- <Decl> ::= <Class Decl> 
function Rule_Decl2(token, expr)
  -- TODO: Rule_Decl2
end


-- <Decl> ::= <Enum Decl> 
function Rule_Decl3(token, expr)
  -- TODO: Rule_Decl3
end


-- <Decl> ::= <Var Decl> 
function Rule_Decl4(token, expr)
  -- TODO: Rule_Decl4
end


-- <Decl> ::= <CDefFunc Decl> 
function Rule_Decl5(token, expr)
  -- TODO: Rule_Decl5
end


-- <Imports> ::= <Import> <Imports> 
function Rule_Imports(token, expr)
  -- TODO: Rule_Imports
end


-- <Imports> ::=  
function Rule_Imports2(token, expr)
  -- TODO: Rule_Imports2
end


-- <Import> ::= import <File Path All> 
function Rule_Import_import(token, expr)
  -- TODO: Rule_Import_import
end


-- <Import> ::= import <File Path> as Id 
function Rule_Import_import_as_Id(token, expr)
  -- TODO: Rule_Import_import_as_Id
end


-- <Import> ::= from <File Path> import <File Path List> 
function Rule_Import_from_import(token, expr)
  -- TODO: Rule_Import_from_import
end


-- <File Path> ::= Id '.' <File Path> 
function Rule_FilePath_Id_Dot(token, expr)
  -- TODO: Rule_FilePath_Id_Dot
end


-- <File Path> ::= Id 
function Rule_FilePath_Id(token, expr)
  -- TODO: Rule_FilePath_Id
end


-- <File Path All> ::= Id '.' <File Path All> 
function Rule_FilePathAll_Id_Dot(token, expr)
  -- TODO: Rule_FilePathAll_Id_Dot
end


-- <File Path All> ::= Id '.*' 
function Rule_FilePathAll_Id_DotTimes(token, expr)
  -- TODO: Rule_FilePathAll_Id_DotTimes
end


-- <File Path All> ::= Id 
function Rule_FilePathAll_Id(token, expr)
  -- TODO: Rule_FilePathAll_Id
end


-- <File Path List> ::= <File Path> ',' <File Path List> 
function Rule_FilePathList_Comma(token, expr)
  -- TODO: Rule_FilePathList_Comma
end


-- <File Path List> ::= <File Path> 
function Rule_FilePathList(token, expr)
  -- TODO: Rule_FilePathList
end


-- <Fn Header Proto> ::= Id '(' <Params> ')' 
function Rule_FnHeaderProto_Id_LParen_RParen(token, expr)
  -- TODO: Rule_FnHeaderProto_Id_LParen_RParen
end


-- <Fn Header Proto> ::= Id '(' <Params> ')' '->' <Type> 
function Rule_FnHeaderProto_Id_LParen_RParen_MinusGt(token, expr)
  -- TODO: Rule_FnHeaderProto_Id_LParen_RParen_MinusGt
end


-- <Fn Header Proto> ::= Id '(' <Types> ')' 
function Rule_FnHeaderProto_Id_LParen_RParen2(token, expr)
  -- TODO: Rule_FnHeaderProto_Id_LParen_RParen2
end


-- <Fn Header Proto> ::= Id '(' <Types> ')' '->' <Type> 
function Rule_FnHeaderProto_Id_LParen_RParen_MinusGt2(token, expr)
  -- TODO: Rule_FnHeaderProto_Id_LParen_RParen_MinusGt2
end


-- <Fn Header Proto> ::= Id '(' ')' 
function Rule_FnHeaderProto_Id_LParen_RParen3(token, expr)
  -- TODO: Rule_FnHeaderProto_Id_LParen_RParen3
end


-- <Fn Header Proto> ::= Id '(' ')' '->' <Type> 
function Rule_FnHeaderProto_Id_LParen_RParen_MinusGt3(token, expr)
  -- TODO: Rule_FnHeaderProto_Id_LParen_RParen_MinusGt3
end


-- <Fn Header Impl> ::= Id '(' <Params> ')' 
function Rule_FnHeaderImpl_Id_LParen_RParen(token, expr)
  -- TODO: Rule_FnHeaderImpl_Id_LParen_RParen
end


-- <Fn Header Impl> ::= Id '(' <Params> ')' '->' <Type> 
function Rule_FnHeaderImpl_Id_LParen_RParen_MinusGt(token, expr)
  -- TODO: Rule_FnHeaderImpl_Id_LParen_RParen_MinusGt
end


-- <Fn Header Impl> ::= Id '(' ')' 
function Rule_FnHeaderImpl_Id_LParen_RParen2(token, expr)
  -- TODO: Rule_FnHeaderImpl_Id_LParen_RParen2
end


-- <Fn Header Impl> ::= Id '(' ')' '->' <Type> 
function Rule_FnHeaderImpl_Id_LParen_RParen_MinusGt2(token, expr)
  -- TODO: Rule_FnHeaderImpl_Id_LParen_RParen_MinusGt2
end


-- <Func Decl> ::= function <Fn Header Impl> <Func Body> 
function Rule_FuncDecl_function(token, expr)
  -- TODO: Rule_FuncDecl_function
end


-- <Func Decl> ::= local function <Fn Header Impl> <Func Body> 
function Rule_FuncDecl_local_function(token, expr)
  -- TODO: Rule_FuncDecl_local_function
end


-- <Func Decl> ::= synchronized function <Fn Header Impl> <Func Body> 
function Rule_FuncDecl_synchronized_function(token, expr)
  -- TODO: Rule_FuncDecl_synchronized_function
end


-- <Func Decl> ::= synchronized local function <Fn Header Impl> <Func Body> 
function Rule_FuncDecl_synchronized_local_function(token, expr)
  -- TODO: Rule_FuncDecl_synchronized_local_function
end


-- <Func Decl> ::= local synchronized function <Fn Header Impl> <Func Body> 
function Rule_FuncDecl_local_synchronized_function(token, expr)
  -- TODO: Rule_FuncDecl_local_synchronized_function
end


-- <Func Decl> ::= pure function <Fn Header Impl> <Func Body> 
function Rule_FuncDecl_pure_function(token, expr)
  -- TODO: Rule_FuncDecl_pure_function
end


-- <Func Decl> ::= local pure function <Fn Header Impl> <Func Body> 
function Rule_FuncDecl_local_pure_function(token, expr)
  -- TODO: Rule_FuncDecl_local_pure_function
end


-- <Func Decl> ::= pure local function <Fn Header Impl> <Func Body> 
function Rule_FuncDecl_pure_local_function(token, expr)
  -- TODO: Rule_FuncDecl_pure_local_function
end


-- <Func Body> ::= '=' <Expr> 
function Rule_FuncBody_Eq(token, expr)
  -- TODO: Rule_FuncBody_Eq
end


-- <Func Body> ::= <Block> 
function Rule_FuncBody(token, expr)
  -- TODO: Rule_FuncBody
end


-- <CFunc Proto> ::= function <Fn Header Proto> 
function Rule_CFuncProto_function(token, expr)
  -- TODO: Rule_CFuncProto_function
end


-- <CFunc Proto> ::= pure function <Fn Header Proto> 
function Rule_CFuncProto_pure_function(token, expr)
  -- TODO: Rule_CFuncProto_pure_function
end


-- <CFunc Proto> ::= static function <Fn Header Proto> 
function Rule_CFuncProto_static_function(token, expr)
  -- TODO: Rule_CFuncProto_static_function
end


-- <CFunc Proto> ::= <Visibility> function <Fn Header Proto> 
function Rule_CFuncProto_function2(token, expr)
  -- TODO: Rule_CFuncProto_function2
end


-- <CFunc Proto> ::= <Inherited> function <Fn Header Proto> 
function Rule_CFuncProto_function3(token, expr)
  -- TODO: Rule_CFuncProto_function3
end


-- <CFunc Proto> ::= pure static function <Fn Header Proto> 
function Rule_CFuncProto_pure_static_function(token, expr)
  -- TODO: Rule_CFuncProto_pure_static_function
end


-- <CFunc Proto> ::= pure <Visibility> function <Fn Header Proto> 
function Rule_CFuncProto_pure_function2(token, expr)
  -- TODO: Rule_CFuncProto_pure_function2
end


-- <CFunc Proto> ::= pure <Inherited> function <Fn Header Proto> 
function Rule_CFuncProto_pure_function3(token, expr)
  -- TODO: Rule_CFuncProto_pure_function3
end


-- <CFunc Proto> ::= static pure function <Fn Header Proto> 
function Rule_CFuncProto_static_pure_function(token, expr)
  -- TODO: Rule_CFuncProto_static_pure_function
end


-- <CFunc Proto> ::= static <Visibility> function <Fn Header Proto> 
function Rule_CFuncProto_static_function2(token, expr)
  -- TODO: Rule_CFuncProto_static_function2
end


-- <CFunc Proto> ::= static <Inherited> function <Fn Header Proto> 
function Rule_CFuncProto_static_function3(token, expr)
  -- TODO: Rule_CFuncProto_static_function3
end


-- <CFunc Proto> ::= <Visibility> pure function <Fn Header Proto> 
function Rule_CFuncProto_pure_function4(token, expr)
  -- TODO: Rule_CFuncProto_pure_function4
end


-- <CFunc Proto> ::= <Visibility> static function <Fn Header Proto> 
function Rule_CFuncProto_static_function4(token, expr)
  -- TODO: Rule_CFuncProto_static_function4
end


-- <CFunc Proto> ::= <Visibility> <Inherited> function <Fn Header Proto> 
function Rule_CFuncProto_function4(token, expr)
  -- TODO: Rule_CFuncProto_function4
end


-- <CFunc Proto> ::= <Inherited> pure function <Fn Header Proto> 
function Rule_CFuncProto_pure_function5(token, expr)
  -- TODO: Rule_CFuncProto_pure_function5
end


-- <CFunc Proto> ::= <Inherited> <Visibility> function <Fn Header Proto> 
function Rule_CFuncProto_function5(token, expr)
  -- TODO: Rule_CFuncProto_function5
end


-- <CFunc Proto> ::= <Inherited> static function <Fn Header Proto> 
function Rule_CFuncProto_static_function5(token, expr)
  -- TODO: Rule_CFuncProto_static_function5
end


-- <CFunc Proto> ::= pure static <Visibility> function <Fn Header Proto> 
function Rule_CFuncProto_pure_static_function2(token, expr)
  -- TODO: Rule_CFuncProto_pure_static_function2
end


-- <CFunc Proto> ::= pure <Visibility> static function <Fn Header Proto> 
function Rule_CFuncProto_pure_static_function3(token, expr)
  -- TODO: Rule_CFuncProto_pure_static_function3
end


-- <CFunc Proto> ::= pure <Visibility> <Inherited> function <Fn Header Proto> 
function Rule_CFuncProto_pure_function6(token, expr)
  -- TODO: Rule_CFuncProto_pure_function6
end


-- <CFunc Proto> ::= pure <Inherited> <Visibility> function <Fn Header Proto> 
function Rule_CFuncProto_pure_function7(token, expr)
  -- TODO: Rule_CFuncProto_pure_function7
end


-- <CFunc Proto> ::= static pure <Visibility> function <Fn Header Proto> 
function Rule_CFuncProto_static_pure_function2(token, expr)
  -- TODO: Rule_CFuncProto_static_pure_function2
end


-- <CFunc Proto> ::= static <Visibility> pure function <Fn Header Proto> 
function Rule_CFuncProto_static_pure_function3(token, expr)
  -- TODO: Rule_CFuncProto_static_pure_function3
end


-- <CFunc Proto> ::= static <Visibility> <Inherited> function <Fn Header Proto> 
function Rule_CFuncProto_static_function6(token, expr)
  -- TODO: Rule_CFuncProto_static_function6
end


-- <CFunc Proto> ::= static <Inherited> <Visibility> function <Fn Header Proto> 
function Rule_CFuncProto_static_function7(token, expr)
  -- TODO: Rule_CFuncProto_static_function7
end


-- <CFunc Proto> ::= <Inherited> <Visibility> pure function <Fn Header Proto> 
function Rule_CFuncProto_pure_function8(token, expr)
  -- TODO: Rule_CFuncProto_pure_function8
end


-- <CFunc Proto> ::= <Inherited> pure <Visibility> function <Fn Header Proto> 
function Rule_CFuncProto_pure_function9(token, expr)
  -- TODO: Rule_CFuncProto_pure_function9
end


-- <CFunc Proto> ::= <Inherited> pure static function <Fn Header Proto> 
function Rule_CFuncProto_pure_static_function4(token, expr)
  -- TODO: Rule_CFuncProto_pure_static_function4
end


-- <CFunc Decl> ::= <CFunc Proto> <Func Body> 
function Rule_CFuncDecl(token, expr)
  -- TODO: Rule_CFuncDecl
end


-- <CDefFunc Decl> ::= extern function <Fn Header Proto> 
function Rule_CDefFuncDecl_extern_function(token, expr)
  -- TODO: Rule_CDefFuncDecl_extern_function
end


-- <CDefFunc Decl> ::= extern pure function <Fn Header Proto> 
function Rule_CDefFuncDecl_extern_pure_function(token, expr)
  -- TODO: Rule_CDefFuncDecl_extern_pure_function
end


-- <CDefFunc Decl> ::= extern local function <Fn Header Proto> 
function Rule_CDefFuncDecl_extern_local_function(token, expr)
  -- TODO: Rule_CDefFuncDecl_extern_local_function
end


-- <CDefFunc Decl> ::= local extern function <Fn Header Proto> 
function Rule_CDefFuncDecl_local_extern_function(token, expr)
  -- TODO: Rule_CDefFuncDecl_local_extern_function
end


-- <CDefFunc Decl> ::= local pure extern function <Fn Header Proto> 
function Rule_CDefFuncDecl_local_pure_extern_function(token, expr)
  -- TODO: Rule_CDefFuncDecl_local_pure_extern_function
end


-- <CDefFunc Decl> ::= local extern pure function <Fn Header Proto> 
function Rule_CDefFuncDecl_local_extern_pure_function(token, expr)
  -- TODO: Rule_CDefFuncDecl_local_extern_pure_function
end


-- <CDefFunc Decl> ::= pure extern function <Fn Header Proto> 
function Rule_CDefFuncDecl_pure_extern_function(token, expr)
  -- TODO: Rule_CDefFuncDecl_pure_extern_function
end


-- <CDefFunc Decl> ::= pure local extern function <Fn Header Proto> 
function Rule_CDefFuncDecl_pure_local_extern_function(token, expr)
  -- TODO: Rule_CDefFuncDecl_pure_local_extern_function
end


-- <CDefFunc Decl> ::= pure extern local function <Fn Header Proto> 
function Rule_CDefFuncDecl_pure_extern_local_function(token, expr)
  -- TODO: Rule_CDefFuncDecl_pure_extern_local_function
end


-- <Visibility> ::= public 
function Rule_Visibility_public(token, expr)
  -- TODO: Rule_Visibility_public
end


-- <Visibility> ::= private 
function Rule_Visibility_private(token, expr)
  -- TODO: Rule_Visibility_private
end


-- <Visibility> ::= protected 
function Rule_Visibility_protected(token, expr)
  -- TODO: Rule_Visibility_protected
end


-- <Inherited> ::= inherited '(' <Pkg List> ')' 
function Rule_Inherited_inherited_LParen_RParen(token, expr)
  -- TODO: Rule_Inherited_inherited_LParen_RParen
end


-- <Inherited> ::= inherited 
function Rule_Inherited_inherited(token, expr)
  -- TODO: Rule_Inherited_inherited
end


-- <Params> ::= <Param> ',' <Params> 
function Rule_Params_Comma(token, expr)
  -- TODO: Rule_Params_Comma
end


-- <Params> ::= <Param> 
function Rule_Params(token, expr)
  -- TODO: Rule_Params
end


-- <Param> ::= final Id ':' <Type> 
function Rule_Param_final_Id_Colon(token, expr)
  -- TODO: Rule_Param_final_Id_Colon
end


-- <Param> ::= Id ':' <Type> 
function Rule_Param_Id_Colon(token, expr)
  -- TODO: Rule_Param_Id_Colon
end


-- <Types> ::= <Type> ',' <Types> 
function Rule_Types_Comma(token, expr)
  -- TODO: Rule_Types_Comma
end


-- <Types> ::= <Type> 
function Rule_Types(token, expr)
  -- TODO: Rule_Types
end


-- <Id List> ::= Id ',' <Id List> 
function Rule_IdList_Id_Comma(token, expr)
  -- TODO: Rule_IdList_Id_Comma
end


-- <Id List> ::= Id 
function Rule_IdList_Id(token, expr)
  -- TODO: Rule_IdList_Id
end


-- <Class Decl> ::= <Normal Class> 
function Rule_ClassDecl(token, expr)
  -- TODO: Rule_ClassDecl
end


-- <Class Decl> ::= <Abstract Class> 
function Rule_ClassDecl2(token, expr)
  -- TODO: Rule_ClassDecl2
end


-- <Class Decl> ::= local <Normal Class> 
function Rule_ClassDecl_local(token, expr)
  -- TODO: Rule_ClassDecl_local
end


-- <Class Decl> ::= local <Abstract Class> 
function Rule_ClassDecl_local2(token, expr)
  -- TODO: Rule_ClassDecl_local2
end


-- <Normal Class> ::= class <Class Name> '{' <CDecls> '}' 
function Rule_NormalClass_class_LBrace_RBrace(token, expr)
  -- TODO: Rule_NormalClass_class_LBrace_RBrace
end


-- <Normal Class> ::= class <Class Name> extends <Extend Class Name List> '{' <CDecls> '}' 
function Rule_NormalClass_class_extends_LBrace_RBrace(token, expr)
  -- TODO: Rule_NormalClass_class_extends_LBrace_RBrace
end


-- <Abstract Class> ::= abstract class <Class Name> '{' <ACDecls> '}' 
function Rule_AbstractClass_abstract_class_LBrace_RBrace(token, expr)
  -- TODO: Rule_AbstractClass_abstract_class_LBrace_RBrace
end


-- <Abstract Class> ::= abstract class <Class Name> extends <Extend Class Name List> '{' <ACDecls> '}' 
function Rule_AbstractClass_abstract_class_extends_LBrace_RBrace(token, expr)
  -- TODO: Rule_AbstractClass_abstract_class_extends_LBrace_RBrace
end


-- <Class Name> ::= Id 
function Rule_ClassName_Id(token, expr)
  -- TODO: Rule_ClassName_Id
end


-- <Class Name> ::= Id '<' <Id List> '>' 
function Rule_ClassName_Id_Lt_Gt(token, expr)
  -- TODO: Rule_ClassName_Id_Lt_Gt
end


-- <Extend Class Name List> ::= <Extend Class Name> ',' <Extend Class Name List> 
function Rule_ExtendClassNameList_Comma(token, expr)
  -- TODO: Rule_ExtendClassNameList_Comma
end


-- <Extend Class Name List> ::= <Extend Class Name> 
function Rule_ExtendClassNameList(token, expr)
  -- TODO: Rule_ExtendClassNameList
end


-- <Extend Class Name> ::= <Pkg> 
function Rule_ExtendClassName(token, expr)
  -- TODO: Rule_ExtendClassName
end


-- <Extend Class Name> ::= <Pkg> '<' <Extend Class Name List> '>' 
function Rule_ExtendClassName_Lt_Gt(token, expr)
  -- TODO: Rule_ExtendClassName_Lt_Gt
end


-- <CDecls> ::= <CDecl> <CDecls> 
function Rule_CDecls(token, expr)
  -- TODO: Rule_CDecls
end


-- <CDecls> ::=  
function Rule_CDecls2(token, expr)
  -- TODO: Rule_CDecls2
end


-- <ACDecls> ::= <ACDecl> <ACDecls> 
function Rule_ACDecls(token, expr)
  -- TODO: Rule_ACDecls
end


-- <ACDecls> ::=  
function Rule_ACDecls2(token, expr)
  -- TODO: Rule_ACDecls2
end


-- <CDecl> ::= <CFunc Decl> 
function Rule_CDecl(token, expr)
  -- TODO: Rule_CDecl
end


-- <CDecl> ::= <CVar Decl> 
function Rule_CDecl2(token, expr)
  -- TODO: Rule_CDecl2
end


-- <CDecl> ::= <Operator Impl> 
function Rule_CDecl3(token, expr)
  -- TODO: Rule_CDecl3
end


-- <ACDecl> ::= <CFunc Decl> 
function Rule_ACDecl(token, expr)
  -- TODO: Rule_ACDecl
end


-- <ACDecl> ::= <CFunc Proto> 
function Rule_ACDecl2(token, expr)
  -- TODO: Rule_ACDecl2
end


-- <ACDecl> ::= <CVar Decl> 
function Rule_ACDecl3(token, expr)
  -- TODO: Rule_ACDecl3
end


-- <ACDecl> ::= <Operator Impl> 
function Rule_ACDecl4(token, expr)
  -- TODO: Rule_ACDecl4
end


-- <ACDecl> ::= <Operator Proto> 
function Rule_ACDecl5(token, expr)
  -- TODO: Rule_ACDecl5
end


-- <Operator Impl> ::= operator <Operator> <Op Header Impl> '=' <Expr> 
function Rule_OperatorImpl_operator_Eq(token, expr)
  -- TODO: Rule_OperatorImpl_operator_Eq
end


-- <Operator Impl> ::= operator <Operator> <Op Header Impl> <Block> 
function Rule_OperatorImpl_operator(token, expr)
  -- TODO: Rule_OperatorImpl_operator
end


-- <Operator Proto> ::= operator <Operator> <Op Header Proto> 
function Rule_OperatorProto_operator(token, expr)
  -- TODO: Rule_OperatorProto_operator
end


-- <CDefStruct> ::= extern struct Id '{' <Params> '}' 
function Rule_CDefStruct_extern_struct_Id_LBrace_RBrace(token, expr)
  -- TODO: Rule_CDefStruct_extern_struct_Id_LBrace_RBrace
end


-- <Operator> ::= '+' 
function Rule_Operator_Plus(token, expr)
  -- TODO: Rule_Operator_Plus
end


-- <Operator> ::= '-' 
function Rule_Operator_Minus(token, expr)
  -- TODO: Rule_Operator_Minus
end


-- <Operator> ::= '*' 
function Rule_Operator_Times(token, expr)
  -- TODO: Rule_Operator_Times
end


-- <Operator> ::= '/' 
function Rule_Operator_Div(token, expr)
  -- TODO: Rule_Operator_Div
end


-- <Operator> ::= '%' 
function Rule_Operator_Percent(token, expr)
  -- TODO: Rule_Operator_Percent
end


-- <Operator> ::= '^' 
function Rule_Operator_Caret(token, expr)
  -- TODO: Rule_Operator_Caret
end


-- <Operator> ::= '&' 
function Rule_Operator_Amp(token, expr)
  -- TODO: Rule_Operator_Amp
end


-- <Operator> ::= '|' 
function Rule_Operator_Pipe(token, expr)
  -- TODO: Rule_Operator_Pipe
end


-- <Operator> ::= '~' 
function Rule_Operator_Tilde(token, expr)
  -- TODO: Rule_Operator_Tilde
end


-- <Operator> ::= '!' 
function Rule_Operator_Exclam(token, expr)
  -- TODO: Rule_Operator_Exclam
end


-- <Operator> ::= '=' 
function Rule_Operator_Eq(token, expr)
  -- TODO: Rule_Operator_Eq
end


-- <Operator> ::= '<' 
function Rule_Operator_Lt(token, expr)
  -- TODO: Rule_Operator_Lt
end


-- <Operator> ::= '>' 
function Rule_Operator_Gt(token, expr)
  -- TODO: Rule_Operator_Gt
end


-- <Operator> ::= '+=' 
function Rule_Operator_PlusEq(token, expr)
  -- TODO: Rule_Operator_PlusEq
end


-- <Operator> ::= '-=' 
function Rule_Operator_MinusEq(token, expr)
  -- TODO: Rule_Operator_MinusEq
end


-- <Operator> ::= '*=' 
function Rule_Operator_TimesEq(token, expr)
  -- TODO: Rule_Operator_TimesEq
end


-- <Operator> ::= '/=' 
function Rule_Operator_DivEq(token, expr)
  -- TODO: Rule_Operator_DivEq
end


-- <Operator> ::= '%=' 
function Rule_Operator_PercentEq(token, expr)
  -- TODO: Rule_Operator_PercentEq
end


-- <Operator> ::= '^=' 
function Rule_Operator_CaretEq(token, expr)
  -- TODO: Rule_Operator_CaretEq
end


-- <Operator> ::= '&=' 
function Rule_Operator_AmpEq(token, expr)
  -- TODO: Rule_Operator_AmpEq
end


-- <Operator> ::= '|=' 
function Rule_Operator_PipeEq(token, expr)
  -- TODO: Rule_Operator_PipeEq
end


-- <Operator> ::= '<<' 
function Rule_Operator_LtLt(token, expr)
  -- TODO: Rule_Operator_LtLt
end


-- <Operator> ::= '>>' 
function Rule_Operator_GtGt(token, expr)
  -- TODO: Rule_Operator_GtGt
end


-- <Operator> ::= '>>=' 
function Rule_Operator_GtGtEq(token, expr)
  -- TODO: Rule_Operator_GtGtEq
end


-- <Operator> ::= '<<=' 
function Rule_Operator_LtLtEq(token, expr)
  -- TODO: Rule_Operator_LtLtEq
end


-- <Operator> ::= '==' 
function Rule_Operator_EqEq(token, expr)
  -- TODO: Rule_Operator_EqEq
end


-- <Operator> ::= '!=' 
function Rule_Operator_ExclamEq(token, expr)
  -- TODO: Rule_Operator_ExclamEq
end


-- <Operator> ::= '<=' 
function Rule_Operator_LtEq(token, expr)
  -- TODO: Rule_Operator_LtEq
end


-- <Operator> ::= '>=' 
function Rule_Operator_GtEq(token, expr)
  -- TODO: Rule_Operator_GtEq
end


-- <Operator> ::= '&&' 
function Rule_Operator_AmpAmp(token, expr)
  -- TODO: Rule_Operator_AmpAmp
end


-- <Operator> ::= '||' 
function Rule_Operator_PipePipe(token, expr)
  -- TODO: Rule_Operator_PipePipe
end


-- <Operator> ::= '++' 
function Rule_Operator_PlusPlus(token, expr)
  -- TODO: Rule_Operator_PlusPlus
end


-- <Operator> ::= '--' 
function Rule_Operator_MinusMinus(token, expr)
  -- TODO: Rule_Operator_MinusMinus
end


-- <Operator> ::= ',' 
function Rule_Operator_Comma(token, expr)
  -- TODO: Rule_Operator_Comma
end


-- <Operator> ::= '(' ')' 
function Rule_Operator_LParen_RParen(token, expr)
  -- TODO: Rule_Operator_LParen_RParen
end


-- <Operator> ::= '[' ']' 
function Rule_Operator_LBracket_RBracket(token, expr)
  -- TODO: Rule_Operator_LBracket_RBracket
end


-- <Op Header Proto> ::= '(' <Params> ')' 
function Rule_OpHeaderProto_LParen_RParen(token, expr)
  -- TODO: Rule_OpHeaderProto_LParen_RParen
end


-- <Op Header Proto> ::= '(' <Params> ')' '->' <Type> 
function Rule_OpHeaderProto_LParen_RParen_MinusGt(token, expr)
  -- TODO: Rule_OpHeaderProto_LParen_RParen_MinusGt
end


-- <Op Header Proto> ::= '(' <Types> ')' 
function Rule_OpHeaderProto_LParen_RParen2(token, expr)
  -- TODO: Rule_OpHeaderProto_LParen_RParen2
end


-- <Op Header Proto> ::= '(' <Types> ')' '->' <Type> 
function Rule_OpHeaderProto_LParen_RParen_MinusGt2(token, expr)
  -- TODO: Rule_OpHeaderProto_LParen_RParen_MinusGt2
end


-- <Op Header Proto> ::= '(' ')' 
function Rule_OpHeaderProto_LParen_RParen3(token, expr)
  -- TODO: Rule_OpHeaderProto_LParen_RParen3
end


-- <Op Header Proto> ::= '(' ')' '->' <Type> 
function Rule_OpHeaderProto_LParen_RParen_MinusGt3(token, expr)
  -- TODO: Rule_OpHeaderProto_LParen_RParen_MinusGt3
end


-- <Op Header Impl> ::= '(' <Params> ')' 
function Rule_OpHeaderImpl_LParen_RParen(token, expr)
  -- TODO: Rule_OpHeaderImpl_LParen_RParen
end


-- <Op Header Impl> ::= '(' <Params> ')' '->' <Type> 
function Rule_OpHeaderImpl_LParen_RParen_MinusGt(token, expr)
  -- TODO: Rule_OpHeaderImpl_LParen_RParen_MinusGt
end


-- <Op Header Impl> ::= '(' ')' 
function Rule_OpHeaderImpl_LParen_RParen2(token, expr)
  -- TODO: Rule_OpHeaderImpl_LParen_RParen2
end


-- <Op Header Impl> ::= '(' ')' '->' <Type> 
function Rule_OpHeaderImpl_LParen_RParen_MinusGt2(token, expr)
  -- TODO: Rule_OpHeaderImpl_LParen_RParen_MinusGt2
end


-- <Var Decl> ::= let final <Var Header> 
function Rule_VarDecl_let_final(token, expr)
  -- TODO: Rule_VarDecl_let_final
end


-- <Var Decl> ::= let <Var Header> 
function Rule_VarDecl_let(token, expr)
  -- TODO: Rule_VarDecl_let
end


-- <Var Decl> ::= let local <Var Header> 
function Rule_VarDecl_let_local(token, expr)
  -- TODO: Rule_VarDecl_let_local
end


-- <Var Decl> ::= let local final <Var Header> 
function Rule_VarDecl_let_local_final(token, expr)
  -- TODO: Rule_VarDecl_let_local_final
end


-- <Var Decl> ::= let final local <Var Header> 
function Rule_VarDecl_let_final_local(token, expr)
  -- TODO: Rule_VarDecl_let_final_local
end


-- <Var Decl> ::= let atomic <Var Header> 
function Rule_VarDecl_let_atomic(token, expr)
  -- TODO: Rule_VarDecl_let_atomic
end


-- <Var Decl> ::= let local atomic <Var Header> 
function Rule_VarDecl_let_local_atomic(token, expr)
  -- TODO: Rule_VarDecl_let_local_atomic
end


-- <Var Decl> ::= let atomic local <Var Header> 
function Rule_VarDecl_let_atomic_local(token, expr)
  -- TODO: Rule_VarDecl_let_atomic_local
end


-- <CVar Decl> ::= let <Var Header> 
function Rule_CVarDecl_let(token, expr)
  -- TODO: Rule_CVarDecl_let
end


-- <CVar Decl> ::= let final <Var Header> 
function Rule_CVarDecl_let_final(token, expr)
  -- TODO: Rule_CVarDecl_let_final
end


-- <CVar Decl> ::= let final static <Var Header> 
function Rule_CVarDecl_let_final_static(token, expr)
  -- TODO: Rule_CVarDecl_let_final_static
end


-- <CVar Decl> ::= let final <Visibility> <Var Header> 
function Rule_CVarDecl_let_final2(token, expr)
  -- TODO: Rule_CVarDecl_let_final2
end


-- <CVar Decl> ::= let final <Visibility> static <Var Header> 
function Rule_CVarDecl_let_final_static2(token, expr)
  -- TODO: Rule_CVarDecl_let_final_static2
end


-- <CVar Decl> ::= let final static <Visibility> <Var Header> 
function Rule_CVarDecl_let_final_static3(token, expr)
  -- TODO: Rule_CVarDecl_let_final_static3
end


-- <CVar Decl> ::= let static <Var Header> 
function Rule_CVarDecl_let_static(token, expr)
  -- TODO: Rule_CVarDecl_let_static
end


-- <CVar Decl> ::= let static final <Var Header> 
function Rule_CVarDecl_let_static_final(token, expr)
  -- TODO: Rule_CVarDecl_let_static_final
end


-- <CVar Decl> ::= let static atomic <Var Header> 
function Rule_CVarDecl_let_static_atomic(token, expr)
  -- TODO: Rule_CVarDecl_let_static_atomic
end


-- <CVar Decl> ::= let static <Visibility> <Var Header> 
function Rule_CVarDecl_let_static2(token, expr)
  -- TODO: Rule_CVarDecl_let_static2
end


-- <CVar Decl> ::= let static <Visibility> atomic <Var Header> 
function Rule_CVarDecl_let_static_atomic2(token, expr)
  -- TODO: Rule_CVarDecl_let_static_atomic2
end


-- <CVar Decl> ::= let static <Visibility> final <Var Header> 
function Rule_CVarDecl_let_static_final2(token, expr)
  -- TODO: Rule_CVarDecl_let_static_final2
end


-- <CVar Decl> ::= let static atomic <Visibility> <Var Header> 
function Rule_CVarDecl_let_static_atomic3(token, expr)
  -- TODO: Rule_CVarDecl_let_static_atomic3
end


-- <CVar Decl> ::= let <Visibility> <Var Header> 
function Rule_CVarDecl_let2(token, expr)
  -- TODO: Rule_CVarDecl_let2
end


-- <CVar Decl> ::= let <Visibility> static <Var Header> 
function Rule_CVarDecl_let_static3(token, expr)
  -- TODO: Rule_CVarDecl_let_static3
end


-- <CVar Decl> ::= let <Visibility> static atomic <Var Header> 
function Rule_CVarDecl_let_static_atomic4(token, expr)
  -- TODO: Rule_CVarDecl_let_static_atomic4
end


-- <CVar Decl> ::= let <Visibility> final <Var Header> 
function Rule_CVarDecl_let_final3(token, expr)
  -- TODO: Rule_CVarDecl_let_final3
end


-- <CVar Decl> ::= let <Visibility> static final <Var Header> 
function Rule_CVarDecl_let_static_final3(token, expr)
  -- TODO: Rule_CVarDecl_let_static_final3
end


-- <CVar Decl> ::= let <Visibility> final static <Var Header> 
function Rule_CVarDecl_let_final_static4(token, expr)
  -- TODO: Rule_CVarDecl_let_final_static4
end


-- <CVar Decl> ::= let <Visibility> atomic static 
function Rule_CVarDecl_let_atomic_static(token, expr)
  -- TODO: Rule_CVarDecl_let_atomic_static
end


-- <CVar Decl> ::= let atomic <Var Header> 
function Rule_CVarDecl_let_atomic(token, expr)
  -- TODO: Rule_CVarDecl_let_atomic
end


-- <CVar Decl> ::= let atomic <Visibility> <Var Header> 
function Rule_CVarDecl_let_atomic2(token, expr)
  -- TODO: Rule_CVarDecl_let_atomic2
end


-- <CVar Decl> ::= let atomic static <Var Header> 
function Rule_CVarDecl_let_atomic_static2(token, expr)
  -- TODO: Rule_CVarDecl_let_atomic_static2
end


-- <CVar Decl> ::= let atomic <Visibility> static <Var Header> 
function Rule_CVarDecl_let_atomic_static3(token, expr)
  -- TODO: Rule_CVarDecl_let_atomic_static3
end


-- <CVar Decl> ::= let atomic static <Visibility> <Var Header> 
function Rule_CVarDecl_let_atomic_static4(token, expr)
  -- TODO: Rule_CVarDecl_let_atomic_static4
end


-- <Var Header> ::= <Id List> ':' <Type> '=' <CSE> 
function Rule_VarHeader_Colon_Eq(token, expr)
  -- TODO: Rule_VarHeader_Colon_Eq
end


-- <Var Header> ::= <Id List> ':' <Type> 
function Rule_VarHeader_Colon(token, expr)
  -- TODO: Rule_VarHeader_Colon
end


-- <Var Header> ::= <Id List> '=' <CSE> 
function Rule_VarHeader_Eq(token, expr)
  -- TODO: Rule_VarHeader_Eq
end


-- <Enum Decl> ::= enum Id '{' <Enum Def> '}' 
function Rule_EnumDecl_enum_Id_LBrace_RBrace(token, expr)
  -- TODO: Rule_EnumDecl_enum_Id_LBrace_RBrace
end


-- <Enum Decl> ::= local enum Id '{' <Enum Def> '}' 
function Rule_EnumDecl_local_enum_Id_LBrace_RBrace(token, expr)
  -- TODO: Rule_EnumDecl_local_enum_Id_LBrace_RBrace
end


-- <Enum Def> ::= Id ',' <Enum Def> 
function Rule_EnumDef_Id_Comma(token, expr)
  -- TODO: Rule_EnumDef_Id_Comma
end


-- <Enum Def> ::= Id 
function Rule_EnumDef_Id(token, expr)
  -- TODO: Rule_EnumDef_Id
end


-- <Type> ::= <Base> 
function Rule_Type(token, expr)
  -- TODO: Rule_Type
end


-- <Type> ::= <Fn Type> 
function Rule_Type2(token, expr)
  -- TODO: Rule_Type2
end


-- <Type> ::= <Pkg Template> 
function Rule_Type3(token, expr)
  -- TODO: Rule_Type3
end


-- <Type> ::= <Type> '[' ']' 
function Rule_Type_LBracket_RBracket(token, expr)
  -- TODO: Rule_Type_LBracket_RBracket
end


-- <Type> ::= '(' <Types> ')' 
function Rule_Type_LParen_RParen(token, expr)
  -- TODO: Rule_Type_LParen_RParen
end


-- <Fn Type> ::= fn '(' ')' 
function Rule_FnType_fn_LParen_RParen(token, expr)
  -- TODO: Rule_FnType_fn_LParen_RParen
end


-- <Fn Type> ::= fn '(' ')' '->' <Type> 
function Rule_FnType_fn_LParen_RParen_MinusGt(token, expr)
  -- TODO: Rule_FnType_fn_LParen_RParen_MinusGt
end


-- <Fn Type> ::= fn '(' <Types> ')' 
function Rule_FnType_fn_LParen_RParen2(token, expr)
  -- TODO: Rule_FnType_fn_LParen_RParen2
end


-- <Fn Type> ::= fn '(' <Types> ')' '->' <Type> 
function Rule_FnType_fn_LParen_RParen_MinusGt2(token, expr)
  -- TODO: Rule_FnType_fn_LParen_RParen_MinusGt2
end


-- <Pkg Template> ::= <Pkg> 
function Rule_PkgTemplate(token, expr)
  -- TODO: Rule_PkgTemplate
end


-- <Pkg Template> ::= <Pkg> '<' <Types> '>' 
function Rule_PkgTemplate_Lt_Gt(token, expr)
  -- TODO: Rule_PkgTemplate_Lt_Gt
end


-- <Base> ::= <Sign> <Scalar> 
function Rule_Base(token, expr)
  -- TODO: Rule_Base
end


-- <Base> ::= 'size_t' 
function Rule_Base_size_t(token, expr)
  -- TODO: Rule_Base_size_t
end


-- <Base> ::= byte 
function Rule_Base_byte(token, expr)
  -- TODO: Rule_Base_byte
end


-- <Base> ::= float 
function Rule_Base_float(token, expr)
  -- TODO: Rule_Base_float
end


-- <Base> ::= double 
function Rule_Base_double(token, expr)
  -- TODO: Rule_Base_double
end


-- <Base> ::= bool 
function Rule_Base_bool(token, expr)
  -- TODO: Rule_Base_bool
end


-- <Base> ::= long double 
function Rule_Base_long_double(token, expr)
  -- TODO: Rule_Base_long_double
end


-- <Sign> ::= signed 
function Rule_Sign_signed(token, expr)
  -- TODO: Rule_Sign_signed
end


-- <Sign> ::= unsigned 
function Rule_Sign_unsigned(token, expr)
  -- TODO: Rule_Sign_unsigned
end


-- <Sign> ::=  
function Rule_Sign(token, expr)
  -- TODO: Rule_Sign
end


-- <Scalar> ::= char 
function Rule_Scalar_char(token, expr)
  -- TODO: Rule_Scalar_char
end


-- <Scalar> ::= int 
function Rule_Scalar_int(token, expr)
  -- TODO: Rule_Scalar_int
end


-- <Scalar> ::= short 
function Rule_Scalar_short(token, expr)
  -- TODO: Rule_Scalar_short
end


-- <Scalar> ::= long 
function Rule_Scalar_long(token, expr)
  -- TODO: Rule_Scalar_long
end


-- <Scalar> ::= short int 
function Rule_Scalar_short_int(token, expr)
  -- TODO: Rule_Scalar_short_int
end


-- <Scalar> ::= long int 
function Rule_Scalar_long_int(token, expr)
  -- TODO: Rule_Scalar_long_int
end


-- <Stm> ::= <Var Decl> 
function Rule_Stm(token, expr)
  -- TODO: Rule_Stm
end


-- <Stm> ::= <If Stm> 
function Rule_Stm2(token, expr)
  -- TODO: Rule_Stm2
end


-- <Stm> ::= while <Expr> <Block> 
function Rule_Stm_while(token, expr)
  -- TODO: Rule_Stm_while
end


-- <Stm> ::= for <Arg> ';' <Arg> ';' <Arg> <Block> 
function Rule_Stm_for_Semi_Semi(token, expr)
  -- TODO: Rule_Stm_for_Semi_Semi
end


-- <Stm> ::= foreach <Param> in <Expr> <Block> 
function Rule_Stm_foreach_in(token, expr)
  -- TODO: Rule_Stm_foreach_in
end


-- <Stm> ::= <Normal Stm> 
function Rule_Stm3(token, expr)
  -- TODO: Rule_Stm3
end


-- <Using Stm> ::= using <Pkg> 
function Rule_UsingStm_using(token, expr)
  -- TODO: Rule_UsingStm_using
end


-- <Using Stms> ::= <Using Stm> <Using Stms> 
function Rule_UsingStms(token, expr)
  -- TODO: Rule_UsingStms
end


-- <Using Stms> ::=  
function Rule_UsingStms2(token, expr)
  -- TODO: Rule_UsingStms2
end


-- <Pkg> ::= Id '.' <Pkg> 
function Rule_Pkg_Id_Dot(token, expr)
  -- TODO: Rule_Pkg_Id_Dot
end


-- <Pkg> ::= Id 
function Rule_Pkg_Id(token, expr)
  -- TODO: Rule_Pkg_Id
end


-- <Pkg List> ::= <Pkg> ',' <Pkg List> 
function Rule_PkgList_Comma(token, expr)
  -- TODO: Rule_PkgList_Comma
end


-- <Pkg List> ::= <Pkg> 
function Rule_PkgList(token, expr)
  -- TODO: Rule_PkgList
end


-- <If Stm> ::= if <Expr> <Block> <else-if> 
function Rule_IfStm_if(token, expr)
  -- TODO: Rule_IfStm_if
end


-- <else-if> ::= else if <Expr> <Block> <else-if> 
function Rule_elseif_else_if(token, expr)
  -- TODO: Rule_elseif_else_if
end


-- <else-if> ::= else <Block> 
function Rule_elseif_else(token, expr)
  -- TODO: Rule_elseif_else
end


-- <else-if> ::=  
function Rule_elseif(token, expr)
  -- TODO: Rule_elseif
end


-- <Normal Stm> ::= do <Block> while <Expr> 
function Rule_NormalStm_do_while(token, expr)
  -- TODO: Rule_NormalStm_do_while
end


-- <Normal Stm> ::= match <Expr> '{' <Case Stms> '}' 
function Rule_NormalStm_match_LBrace_RBrace(token, expr)
  -- TODO: Rule_NormalStm_match_LBrace_RBrace
end


-- <Normal Stm> ::= <Block> 
function Rule_NormalStm(token, expr)
  -- TODO: Rule_NormalStm
end


-- <Normal Stm> ::= <Expr> 
function Rule_NormalStm2(token, expr)
  -- TODO: Rule_NormalStm2
end


-- <Normal Stm> ::= break 
function Rule_NormalStm_break(token, expr)
  -- TODO: Rule_NormalStm_break
end


-- <Normal Stm> ::= continue 
function Rule_NormalStm_continue(token, expr)
  -- TODO: Rule_NormalStm_continue
end


-- <Normal Stm> ::= return <Expr> 
function Rule_NormalStm_return(token, expr)
  -- TODO: Rule_NormalStm_return
end


-- <Normal Stm> ::= return 
function Rule_NormalStm_return2(token, expr)
  -- TODO: Rule_NormalStm_return2
end


-- <Normal Stm> ::= ';' 
function Rule_NormalStm_Semi(token, expr)
  -- TODO: Rule_NormalStm_Semi
end


-- <Arg> ::= <Expr> 
function Rule_Arg(token, expr)
  -- TODO: Rule_Arg
end


-- <Arg> ::=  
function Rule_Arg2(token, expr)
  -- TODO: Rule_Arg2
end


-- <Case Stms> ::= case <Expr> when <Expr> <Block> <Case Stms> 
function Rule_CaseStms_case_when(token, expr)
  -- TODO: Rule_CaseStms_case_when
end


-- <Case Stms> ::= case <Expr> <Block> <Case Stms> 
function Rule_CaseStms_case(token, expr)
  -- TODO: Rule_CaseStms_case
end


-- <Case Stms> ::= else <Block> 
function Rule_CaseStms_else(token, expr)
  -- TODO: Rule_CaseStms_else
end


-- <Block> ::= '{' <Using Stms> <Stm List> '}' 
function Rule_Block_LBrace_RBrace(token, expr)
  -- TODO: Rule_Block_LBrace_RBrace
end


-- <Block> ::= synchronized '{' <Using Stms> <Stm List> '}' 
function Rule_Block_synchronized_LBrace_RBrace(token, expr)
  -- TODO: Rule_Block_synchronized_LBrace_RBrace
end


-- <Stm List> ::= <Stm> <Stm List> 
function Rule_StmList(token, expr)
  -- TODO: Rule_StmList
end


-- <Stm List> ::=  
function Rule_StmList2(token, expr)
  -- TODO: Rule_StmList2
end


-- <CSE> ::= <Expr> 
function Rule_CSE(token, expr)
  -- TODO: Rule_CSE
end


-- <CSE> ::= <CSE> ',' <Expr> 
function Rule_CSE_Comma(token, expr)
  -- TODO: Rule_CSE_Comma
end


-- <Expr> ::= <Var Decl> in <Expr> 
function Rule_Expr_in(token, expr)
  -- TODO: Rule_Expr_in
end


-- <Expr> ::= match <Expr> '{' <Case Exprs> '}' 
function Rule_Expr_match_LBrace_RBrace(token, expr)
  -- TODO: Rule_Expr_match_LBrace_RBrace
end


-- <Expr> ::= <Op Assign> 
function Rule_Expr(token, expr)
  -- TODO: Rule_Expr
end


-- <Op Assign> ::= <Op Or> '=' <Op Assign> 
function Rule_OpAssign_Eq(token, expr)
  -- TODO: Rule_OpAssign_Eq
end


-- <Op Assign> ::= <Op Or> '+=' <Op Assign> 
function Rule_OpAssign_PlusEq(token, expr)
  -- TODO: Rule_OpAssign_PlusEq
end


-- <Op Assign> ::= <Op Or> '-=' <Op Assign> 
function Rule_OpAssign_MinusEq(token, expr)
  -- TODO: Rule_OpAssign_MinusEq
end


-- <Op Assign> ::= <Op Or> '*=' <Op Assign> 
function Rule_OpAssign_TimesEq(token, expr)
  -- TODO: Rule_OpAssign_TimesEq
end


-- <Op Assign> ::= <Op Or> '/=' <Op Assign> 
function Rule_OpAssign_DivEq(token, expr)
  -- TODO: Rule_OpAssign_DivEq
end


-- <Op Assign> ::= <Op Or> '%=' <Op Assign> 
function Rule_OpAssign_PercentEq(token, expr)
  -- TODO: Rule_OpAssign_PercentEq
end


-- <Op Assign> ::= <Op Or> '^=' <Op Assign> 
function Rule_OpAssign_CaretEq(token, expr)
  -- TODO: Rule_OpAssign_CaretEq
end


-- <Op Assign> ::= <Op Or> '&=' <Op Assign> 
function Rule_OpAssign_AmpEq(token, expr)
  -- TODO: Rule_OpAssign_AmpEq
end


-- <Op Assign> ::= <Op Or> '|=' <Op Assign> 
function Rule_OpAssign_PipeEq(token, expr)
  -- TODO: Rule_OpAssign_PipeEq
end


-- <Op Assign> ::= <Op Or> '>>=' <Op Assign> 
function Rule_OpAssign_GtGtEq(token, expr)
  -- TODO: Rule_OpAssign_GtGtEq
end


-- <Op Assign> ::= <Op Or> '<<=' <Op Assign> 
function Rule_OpAssign_LtLtEq(token, expr)
  -- TODO: Rule_OpAssign_LtLtEq
end


-- <Op Assign> ::= <Op Or> 
function Rule_OpAssign(token, expr)
  -- TODO: Rule_OpAssign
end


-- <Op Or> ::= <Op Or> '||' <Op And> 
function Rule_OpOr_PipePipe(token, expr)
  -- TODO: Rule_OpOr_PipePipe
end


-- <Op Or> ::= <Op And> 
function Rule_OpOr(token, expr)
  -- TODO: Rule_OpOr
end


-- <Op And> ::= <Op And> '&&' <Op BinOR> 
function Rule_OpAnd_AmpAmp(token, expr)
  -- TODO: Rule_OpAnd_AmpAmp
end


-- <Op And> ::= <Op BinOR> 
function Rule_OpAnd(token, expr)
  -- TODO: Rule_OpAnd
end


-- <Op BinOR> ::= <Op BinOR> '|' <Op BinXOR> 
function Rule_OpBinOR_Pipe(token, expr)
  -- TODO: Rule_OpBinOR_Pipe
end


-- <Op BinOR> ::= <Op BinXOR> 
function Rule_OpBinOR(token, expr)
  -- TODO: Rule_OpBinOR
end


-- <Op BinXOR> ::= <Op BinXOR> '^' <Op BinAND> 
function Rule_OpBinXOR_Caret(token, expr)
  -- TODO: Rule_OpBinXOR_Caret
end


-- <Op BinXOR> ::= <Op BinAND> 
function Rule_OpBinXOR(token, expr)
  -- TODO: Rule_OpBinXOR
end


-- <Op BinAND> ::= <Op BinAND> '&' <Op Equate> 
function Rule_OpBinAND_Amp(token, expr)
  -- TODO: Rule_OpBinAND_Amp
end


-- <Op BinAND> ::= <Op Equate> 
function Rule_OpBinAND(token, expr)
  -- TODO: Rule_OpBinAND
end


-- <Op Equate> ::= <Op Equate> '==' <Op Compare> 
function Rule_OpEquate_EqEq(token, expr)
  -- TODO: Rule_OpEquate_EqEq
end


-- <Op Equate> ::= <Op Equate> '!=' <Op Compare> 
function Rule_OpEquate_ExclamEq(token, expr)
  -- TODO: Rule_OpEquate_ExclamEq
end


-- <Op Equate> ::= <Op Compare> 
function Rule_OpEquate(token, expr)
  -- TODO: Rule_OpEquate
end


-- <Op Compare> ::= <Op Compare> '<' <Op Shift> 
function Rule_OpCompare_Lt(token, expr)
  -- TODO: Rule_OpCompare_Lt
end


-- <Op Compare> ::= <Op Compare> '>' <Op Shift> 
function Rule_OpCompare_Gt(token, expr)
  -- TODO: Rule_OpCompare_Gt
end


-- <Op Compare> ::= <Op Compare> '<=' <Op Shift> 
function Rule_OpCompare_LtEq(token, expr)
  -- TODO: Rule_OpCompare_LtEq
end


-- <Op Compare> ::= <Op Compare> '>=' <Op Shift> 
function Rule_OpCompare_GtEq(token, expr)
  -- TODO: Rule_OpCompare_GtEq
end


-- <Op Compare> ::= <Op Compare> is <Type> 
function Rule_OpCompare_is(token, expr)
  -- TODO: Rule_OpCompare_is
end


-- <Op Compare> ::= <Op Shift> 
function Rule_OpCompare(token, expr)
  -- TODO: Rule_OpCompare
end


-- <Op Shift> ::= <Op Shift> '<<' <Op Add> 
function Rule_OpShift_LtLt(token, expr)
  -- TODO: Rule_OpShift_LtLt
end


-- <Op Shift> ::= <Op Shift> '>>' <Op Add> 
function Rule_OpShift_GtGt(token, expr)
  -- TODO: Rule_OpShift_GtGt
end


-- <Op Shift> ::= <Op Add> 
function Rule_OpShift(token, expr)
  -- TODO: Rule_OpShift
end


-- <Op Add> ::= <Op Add> '+' <Op Mult> 
function Rule_OpAdd_Plus(token, expr)
  -- TODO: Rule_OpAdd_Plus
end


-- <Op Add> ::= <Op Add> '-' <Op Mult> 
function Rule_OpAdd_Minus(token, expr)
  -- TODO: Rule_OpAdd_Minus
end


-- <Op Add> ::= <Op Mult> 
function Rule_OpAdd(token, expr)
  -- TODO: Rule_OpAdd
end


-- <Op Mult> ::= <Op Mult> '*' <Op Unary> 
function Rule_OpMult_Times(token, expr)
  -- TODO: Rule_OpMult_Times
end


-- <Op Mult> ::= <Op Mult> '/' <Op Unary> 
function Rule_OpMult_Div(token, expr)
  -- TODO: Rule_OpMult_Div
end


-- <Op Mult> ::= <Op Mult> '%' <Op Unary> 
function Rule_OpMult_Percent(token, expr)
  -- TODO: Rule_OpMult_Percent
end


-- <Op Mult> ::= <Op Unary> 
function Rule_OpMult(token, expr)
  -- TODO: Rule_OpMult
end


-- <Op Unary> ::= '!' <Op Unary> 
function Rule_OpUnary_Exclam(token, expr)
  -- TODO: Rule_OpUnary_Exclam
end


-- <Op Unary> ::= '~' <Op Unary> 
function Rule_OpUnary_Tilde(token, expr)
  -- TODO: Rule_OpUnary_Tilde
end


-- <Op Unary> ::= '-' <Op Unary> 
function Rule_OpUnary_Minus(token, expr)
  -- TODO: Rule_OpUnary_Minus
end


-- <Op Unary> ::= '++' <Op Unary> 
function Rule_OpUnary_PlusPlus(token, expr)
  -- TODO: Rule_OpUnary_PlusPlus
end


-- <Op Unary> ::= '--' <Op Unary> 
function Rule_OpUnary_MinusMinus(token, expr)
  -- TODO: Rule_OpUnary_MinusMinus
end


-- <Op Unary> ::= <Op Pointer> '++' 
function Rule_OpUnary_PlusPlus2(token, expr)
  -- TODO: Rule_OpUnary_PlusPlus2
end


-- <Op Unary> ::= <Op Pointer> '--' 
function Rule_OpUnary_MinusMinus2(token, expr)
  -- TODO: Rule_OpUnary_MinusMinus2
end


-- <Op Unary> ::= <Op Unary> as <Type> 
function Rule_OpUnary_as(token, expr)
  -- TODO: Rule_OpUnary_as
end


-- <Op Unary> ::= <New Expr> 
function Rule_OpUnary(token, expr)
  -- TODO: Rule_OpUnary
end


-- <Op Unary> ::= delete <Op Pointer> 
function Rule_OpUnary_delete(token, expr)
  -- TODO: Rule_OpUnary_delete
end


-- <Op Unary> ::= sizeof '(' <Type> ')' 
function Rule_OpUnary_sizeof_LParen_RParen(token, expr)
  -- TODO: Rule_OpUnary_sizeof_LParen_RParen
end


-- <Op Unary> ::= <Op Pointer> 
function Rule_OpUnary2(token, expr)
  -- TODO: Rule_OpUnary2
end


-- <Op Pointer> ::= <Op Pointer> '.' <Value> 
function Rule_OpPointer_Dot(token, expr)
  -- TODO: Rule_OpPointer_Dot
end


-- <Op Pointer> ::= <Op Pointer> '[' <CSE> ']' 
function Rule_OpPointer_LBracket_RBracket(token, expr)
  -- TODO: Rule_OpPointer_LBracket_RBracket
end


-- <Op Pointer> ::= <Op Pointer> '(' <CSE> ')' 
function Rule_OpPointer_LParen_RParen(token, expr)
  -- TODO: Rule_OpPointer_LParen_RParen
end


-- <Op Pointer> ::= <Op Pointer> '(' ')' 
function Rule_OpPointer_LParen_RParen2(token, expr)
  -- TODO: Rule_OpPointer_LParen_RParen2
end


-- <Op Pointer> ::= <Value> 
function Rule_OpPointer(token, expr)
  -- TODO: Rule_OpPointer
end


-- <Value> ::= OctLiteral 
function Rule_Value_OctLiteral(token, expr)
  -- TODO: Rule_Value_OctLiteral
end


-- <Value> ::= HexLiteral 
function Rule_Value_HexLiteral(token, expr)
  -- TODO: Rule_Value_HexLiteral
end


-- <Value> ::= DecLiteral 
function Rule_Value_DecLiteral(token, expr)
  -- TODO: Rule_Value_DecLiteral
end


-- <Value> ::= BinLiteral 
function Rule_Value_BinLiteral(token, expr)
  -- TODO: Rule_Value_BinLiteral
end


-- <Value> ::= StringLiteral 
function Rule_Value_StringLiteral(token, expr)
  -- TODO: Rule_Value_StringLiteral
end


-- <Value> ::= CharLiteral 
function Rule_Value_CharLiteral(token, expr)
  -- TODO: Rule_Value_CharLiteral
end


-- <Value> ::= FloatLiteral 
function Rule_Value_FloatLiteral(token, expr)
  -- TODO: Rule_Value_FloatLiteral
end


-- <Value> ::= null 
function Rule_Value_null(token, expr)
  -- TODO: Rule_Value_null
end


-- <Value> ::= '_' 
function Rule_Value__(token, expr)
  -- TODO: Rule_Value__
end


-- <Value> ::= true 
function Rule_Value_true(token, expr)
  -- TODO: Rule_Value_true
end


-- <Value> ::= false 
function Rule_Value_false(token, expr)
  -- TODO: Rule_Value_false
end


-- <Value> ::= <Pkg> 
function Rule_Value(token, expr)
  -- TODO: Rule_Value
end


-- <Value> ::= <Lambda Expr> 
function Rule_Value2(token, expr)
  -- TODO: Rule_Value2
end


-- <Value> ::= '(' <CSE> ')' 
function Rule_Value_LParen_RParen(token, expr)
  -- TODO: Rule_Value_LParen_RParen
end


-- <Value> ::= '[' for Id ':' <Type> in <Expr> '=>' <Expr> ']' 
function Rule_Value_LBracket_for_Id_Colon_in_EqGt_RBracket(token, expr)
  -- TODO: Rule_Value_LBracket_for_Id_Colon_in_EqGt_RBracket
end


-- <Value> ::= '[' for Id in <Expr> '=>' <Expr> ']' 
function Rule_Value_LBracket_for_Id_in_EqGt_RBracket(token, expr)
  -- TODO: Rule_Value_LBracket_for_Id_in_EqGt_RBracket
end


-- <Value> ::= '[' for Id ':' <Type> in <Expr> if <Expr> '=>' <Expr> ']' 
function Rule_Value_LBracket_for_Id_Colon_in_if_EqGt_RBracket(token, expr)
  -- TODO: Rule_Value_LBracket_for_Id_Colon_in_if_EqGt_RBracket
end


-- <Value> ::= '[' for Id in <Expr> if <Expr> '=>' <Expr> ']' 
function Rule_Value_LBracket_for_Id_in_if_EqGt_RBracket(token, expr)
  -- TODO: Rule_Value_LBracket_for_Id_in_if_EqGt_RBracket
end


-- <Value> ::= '[' <CSE> ']' 
function Rule_Value_LBracket_RBracket(token, expr)
  -- TODO: Rule_Value_LBracket_RBracket
end


-- <Lambda Expr> ::= lambda '(' <Params> ')' <Block> 
function Rule_LambdaExpr_lambda_LParen_RParen(token, expr)
  -- TODO: Rule_LambdaExpr_lambda_LParen_RParen
end


-- <Lambda Expr> ::= lambda '(' <Params> ')' '=' <Expr> 
function Rule_LambdaExpr_lambda_LParen_RParen_Eq(token, expr)
  -- TODO: Rule_LambdaExpr_lambda_LParen_RParen_Eq
end


-- <Lambda Expr> ::= lambda '(' <Params> ')' '->' <Type> <Block> 
function Rule_LambdaExpr_lambda_LParen_RParen_MinusGt(token, expr)
  -- TODO: Rule_LambdaExpr_lambda_LParen_RParen_MinusGt
end


-- <Lambda Expr> ::= lambda '(' <Params> ')' '->' <Type> '=' <Expr> 
function Rule_LambdaExpr_lambda_LParen_RParen_MinusGt_Eq(token, expr)
  -- TODO: Rule_LambdaExpr_lambda_LParen_RParen_MinusGt_Eq
end


-- <Case Exprs> ::= case <Expr> when <Expr> '=>' <Expr> <Case Exprs> 
function Rule_CaseExprs_case_when_EqGt(token, expr)
  -- TODO: Rule_CaseExprs_case_when_EqGt
end


-- <Case Exprs> ::= case <Expr> '=>' <Expr> <Case Exprs> 
function Rule_CaseExprs_case_EqGt(token, expr)
  -- TODO: Rule_CaseExprs_case_EqGt
end


-- <Case Exprs> ::= else '=>' <Expr> 
function Rule_CaseExprs_else_EqGt(token, expr)
  -- TODO: Rule_CaseExprs_else_EqGt
end


-- <New Expr> ::= new <Pkg Template> '(' ')' 
function Rule_NewExpr_new_LParen_RParen(token, expr)
  -- TODO: Rule_NewExpr_new_LParen_RParen
end


-- <New Expr> ::= new <Pkg Template> '(' <Expr> ')' 
function Rule_NewExpr_new_LParen_RParen2(token, expr)
  -- TODO: Rule_NewExpr_new_LParen_RParen2
end


-- <New Expr> ::= new <Pkg Template> '(' ')' '{' <CDecl> '}' 
function Rule_NewExpr_new_LParen_RParen_LBrace_RBrace(token, expr)
  -- TODO: Rule_NewExpr_new_LParen_RParen_LBrace_RBrace
end


-- <New Expr> ::= new <Pkg Template> '(' <Expr> ')' '{' <CDecl> '}' 
function Rule_NewExpr_new_LParen_RParen_LBrace_RBrace2(token, expr)
  -- TODO: Rule_NewExpr_new_LParen_RParen_LBrace_RBrace2
end


-- <New Expr> ::= new <Type> 
function Rule_NewExpr_new(token, expr)
  -- TODO: Rule_NewExpr_new
end


-- <New Expr> ::= new <Type> '[' <Expr> ']' 
function Rule_NewExpr_new_LBracket_RBracket(token, expr)
  -- TODO: Rule_NewExpr_new_LBracket_RBracket
end




local ruleJumpTable = {

  -- 0. <Decls> ::= <Imports> <Using Stms> <Decl List> 
  Rule_Decls,

  -- 1. <Decls> ::=  
  Rule_Decls2,

  -- 2. <Decl List> ::= <Decl> <Decl List> 
  Rule_DeclList,

  -- 3. <Decl List> ::= <Decl> 
  Rule_DeclList2,

  -- 4. <Decl> ::= <Func Decl> 
  Rule_Decl,

  -- 5. <Decl> ::= <Class Decl> 
  Rule_Decl2,

  -- 6. <Decl> ::= <Enum Decl> 
  Rule_Decl3,

  -- 7. <Decl> ::= <Var Decl> 
  Rule_Decl4,

  -- 8. <Decl> ::= <CDefFunc Decl> 
  Rule_Decl5,

  -- 9. <Imports> ::= <Import> <Imports> 
  Rule_Imports,

  -- 10. <Imports> ::=  
  Rule_Imports2,

  -- 11. <Import> ::= import <File Path All> 
  Rule_Import_import,

  -- 12. <Import> ::= import <File Path> as Id 
  Rule_Import_import_as_Id,

  -- 13. <Import> ::= from <File Path> import <File Path List> 
  Rule_Import_from_import,

  -- 14. <File Path> ::= Id '.' <File Path> 
  Rule_FilePath_Id_Dot,

  -- 15. <File Path> ::= Id 
  Rule_FilePath_Id,

  -- 16. <File Path All> ::= Id '.' <File Path All> 
  Rule_FilePathAll_Id_Dot,

  -- 17. <File Path All> ::= Id '.*' 
  Rule_FilePathAll_Id_DotTimes,

  -- 18. <File Path All> ::= Id 
  Rule_FilePathAll_Id,

  -- 19. <File Path List> ::= <File Path> ',' <File Path List> 
  Rule_FilePathList_Comma,

  -- 20. <File Path List> ::= <File Path> 
  Rule_FilePathList,

  -- 21. <Fn Header Proto> ::= Id '(' <Params> ')' 
  Rule_FnHeaderProto_Id_LParen_RParen,

  -- 22. <Fn Header Proto> ::= Id '(' <Params> ')' '->' <Type> 
  Rule_FnHeaderProto_Id_LParen_RParen_MinusGt,

  -- 23. <Fn Header Proto> ::= Id '(' <Types> ')' 
  Rule_FnHeaderProto_Id_LParen_RParen2,

  -- 24. <Fn Header Proto> ::= Id '(' <Types> ')' '->' <Type> 
  Rule_FnHeaderProto_Id_LParen_RParen_MinusGt2,

  -- 25. <Fn Header Proto> ::= Id '(' ')' 
  Rule_FnHeaderProto_Id_LParen_RParen3,

  -- 26. <Fn Header Proto> ::= Id '(' ')' '->' <Type> 
  Rule_FnHeaderProto_Id_LParen_RParen_MinusGt3,

  -- 27. <Fn Header Impl> ::= Id '(' <Params> ')' 
  Rule_FnHeaderImpl_Id_LParen_RParen,

  -- 28. <Fn Header Impl> ::= Id '(' <Params> ')' '->' <Type> 
  Rule_FnHeaderImpl_Id_LParen_RParen_MinusGt,

  -- 29. <Fn Header Impl> ::= Id '(' ')' 
  Rule_FnHeaderImpl_Id_LParen_RParen2,

  -- 30. <Fn Header Impl> ::= Id '(' ')' '->' <Type> 
  Rule_FnHeaderImpl_Id_LParen_RParen_MinusGt2,

  -- 31. <Func Decl> ::= function <Fn Header Impl> <Func Body> 
  Rule_FuncDecl_function,

  -- 32. <Func Decl> ::= local function <Fn Header Impl> <Func Body> 
  Rule_FuncDecl_local_function,

  -- 33. <Func Decl> ::= synchronized function <Fn Header Impl> <Func Body> 
  Rule_FuncDecl_synchronized_function,

  -- 34. <Func Decl> ::= synchronized local function <Fn Header Impl> <Func Body> 
  Rule_FuncDecl_synchronized_local_function,

  -- 35. <Func Decl> ::= local synchronized function <Fn Header Impl> <Func Body> 
  Rule_FuncDecl_local_synchronized_function,

  -- 36. <Func Decl> ::= pure function <Fn Header Impl> <Func Body> 
  Rule_FuncDecl_pure_function,

  -- 37. <Func Decl> ::= local pure function <Fn Header Impl> <Func Body> 
  Rule_FuncDecl_local_pure_function,

  -- 38. <Func Decl> ::= pure local function <Fn Header Impl> <Func Body> 
  Rule_FuncDecl_pure_local_function,

  -- 39. <Func Body> ::= '=' <Expr> 
  Rule_FuncBody_Eq,

  -- 40. <Func Body> ::= <Block> 
  Rule_FuncBody,

  -- 41. <CFunc Proto> ::= function <Fn Header Proto> 
  Rule_CFuncProto_function,

  -- 42. <CFunc Proto> ::= pure function <Fn Header Proto> 
  Rule_CFuncProto_pure_function,

  -- 43. <CFunc Proto> ::= static function <Fn Header Proto> 
  Rule_CFuncProto_static_function,

  -- 44. <CFunc Proto> ::= <Visibility> function <Fn Header Proto> 
  Rule_CFuncProto_function2,

  -- 45. <CFunc Proto> ::= <Inherited> function <Fn Header Proto> 
  Rule_CFuncProto_function3,

  -- 46. <CFunc Proto> ::= pure static function <Fn Header Proto> 
  Rule_CFuncProto_pure_static_function,

  -- 47. <CFunc Proto> ::= pure <Visibility> function <Fn Header Proto> 
  Rule_CFuncProto_pure_function2,

  -- 48. <CFunc Proto> ::= pure <Inherited> function <Fn Header Proto> 
  Rule_CFuncProto_pure_function3,

  -- 49. <CFunc Proto> ::= static pure function <Fn Header Proto> 
  Rule_CFuncProto_static_pure_function,

  -- 50. <CFunc Proto> ::= static <Visibility> function <Fn Header Proto> 
  Rule_CFuncProto_static_function2,

  -- 51. <CFunc Proto> ::= static <Inherited> function <Fn Header Proto> 
  Rule_CFuncProto_static_function3,

  -- 52. <CFunc Proto> ::= <Visibility> pure function <Fn Header Proto> 
  Rule_CFuncProto_pure_function4,

  -- 53. <CFunc Proto> ::= <Visibility> static function <Fn Header Proto> 
  Rule_CFuncProto_static_function4,

  -- 54. <CFunc Proto> ::= <Visibility> <Inherited> function <Fn Header Proto> 
  Rule_CFuncProto_function4,

  -- 55. <CFunc Proto> ::= <Inherited> pure function <Fn Header Proto> 
  Rule_CFuncProto_pure_function5,

  -- 56. <CFunc Proto> ::= <Inherited> <Visibility> function <Fn Header Proto> 
  Rule_CFuncProto_function5,

  -- 57. <CFunc Proto> ::= <Inherited> static function <Fn Header Proto> 
  Rule_CFuncProto_static_function5,

  -- 58. <CFunc Proto> ::= pure static <Visibility> function <Fn Header Proto> 
  Rule_CFuncProto_pure_static_function2,

  -- 59. <CFunc Proto> ::= pure <Visibility> static function <Fn Header Proto> 
  Rule_CFuncProto_pure_static_function3,

  -- 60. <CFunc Proto> ::= pure <Visibility> <Inherited> function <Fn Header Proto> 
  Rule_CFuncProto_pure_function6,

  -- 61. <CFunc Proto> ::= pure <Inherited> <Visibility> function <Fn Header Proto> 
  Rule_CFuncProto_pure_function7,

  -- 62. <CFunc Proto> ::= static pure <Visibility> function <Fn Header Proto> 
  Rule_CFuncProto_static_pure_function2,

  -- 63. <CFunc Proto> ::= static <Visibility> pure function <Fn Header Proto> 
  Rule_CFuncProto_static_pure_function3,

  -- 64. <CFunc Proto> ::= static <Visibility> <Inherited> function <Fn Header Proto> 
  Rule_CFuncProto_static_function6,

  -- 65. <CFunc Proto> ::= static <Inherited> <Visibility> function <Fn Header Proto> 
  Rule_CFuncProto_static_function7,

  -- 66. <CFunc Proto> ::= <Inherited> <Visibility> pure function <Fn Header Proto> 
  Rule_CFuncProto_pure_function8,

  -- 67. <CFunc Proto> ::= <Inherited> pure <Visibility> function <Fn Header Proto> 
  Rule_CFuncProto_pure_function9,

  -- 68. <CFunc Proto> ::= <Inherited> pure static function <Fn Header Proto> 
  Rule_CFuncProto_pure_static_function4,

  -- 69. <CFunc Decl> ::= <CFunc Proto> <Func Body> 
  Rule_CFuncDecl,

  -- 70. <CDefFunc Decl> ::= extern function <Fn Header Proto> 
  Rule_CDefFuncDecl_extern_function,

  -- 71. <CDefFunc Decl> ::= extern pure function <Fn Header Proto> 
  Rule_CDefFuncDecl_extern_pure_function,

  -- 72. <CDefFunc Decl> ::= extern local function <Fn Header Proto> 
  Rule_CDefFuncDecl_extern_local_function,

  -- 73. <CDefFunc Decl> ::= local extern function <Fn Header Proto> 
  Rule_CDefFuncDecl_local_extern_function,

  -- 74. <CDefFunc Decl> ::= local pure extern function <Fn Header Proto> 
  Rule_CDefFuncDecl_local_pure_extern_function,

  -- 75. <CDefFunc Decl> ::= local extern pure function <Fn Header Proto> 
  Rule_CDefFuncDecl_local_extern_pure_function,

  -- 76. <CDefFunc Decl> ::= pure extern function <Fn Header Proto> 
  Rule_CDefFuncDecl_pure_extern_function,

  -- 77. <CDefFunc Decl> ::= pure local extern function <Fn Header Proto> 
  Rule_CDefFuncDecl_pure_local_extern_function,

  -- 78. <CDefFunc Decl> ::= pure extern local function <Fn Header Proto> 
  Rule_CDefFuncDecl_pure_extern_local_function,

  -- 79. <Visibility> ::= public 
  Rule_Visibility_public,

  -- 80. <Visibility> ::= private 
  Rule_Visibility_private,

  -- 81. <Visibility> ::= protected 
  Rule_Visibility_protected,

  -- 82. <Inherited> ::= inherited '(' <Pkg List> ')' 
  Rule_Inherited_inherited_LParen_RParen,

  -- 83. <Inherited> ::= inherited 
  Rule_Inherited_inherited,

  -- 84. <Params> ::= <Param> ',' <Params> 
  Rule_Params_Comma,

  -- 85. <Params> ::= <Param> 
  Rule_Params,

  -- 86. <Param> ::= final Id ':' <Type> 
  Rule_Param_final_Id_Colon,

  -- 87. <Param> ::= Id ':' <Type> 
  Rule_Param_Id_Colon,

  -- 88. <Types> ::= <Type> ',' <Types> 
  Rule_Types_Comma,

  -- 89. <Types> ::= <Type> 
  Rule_Types,

  -- 90. <Id List> ::= Id ',' <Id List> 
  Rule_IdList_Id_Comma,

  -- 91. <Id List> ::= Id 
  Rule_IdList_Id,

  -- 92. <Class Decl> ::= <Normal Class> 
  Rule_ClassDecl,

  -- 93. <Class Decl> ::= <Abstract Class> 
  Rule_ClassDecl2,

  -- 94. <Class Decl> ::= local <Normal Class> 
  Rule_ClassDecl_local,

  -- 95. <Class Decl> ::= local <Abstract Class> 
  Rule_ClassDecl_local2,

  -- 96. <Normal Class> ::= class <Class Name> '{' <CDecls> '}' 
  Rule_NormalClass_class_LBrace_RBrace,

  -- 97. <Normal Class> ::= class <Class Name> extends <Extend Class Name List> '{' <CDecls> '}' 
  Rule_NormalClass_class_extends_LBrace_RBrace,

  -- 98. <Abstract Class> ::= abstract class <Class Name> '{' <ACDecls> '}' 
  Rule_AbstractClass_abstract_class_LBrace_RBrace,

  -- 99. <Abstract Class> ::= abstract class <Class Name> extends <Extend Class Name List> '{' <ACDecls> '}' 
  Rule_AbstractClass_abstract_class_extends_LBrace_RBrace,

  -- 100. <Class Name> ::= Id 
  Rule_ClassName_Id,

  -- 101. <Class Name> ::= Id '<' <Id List> '>' 
  Rule_ClassName_Id_Lt_Gt,

  -- 102. <Extend Class Name List> ::= <Extend Class Name> ',' <Extend Class Name List> 
  Rule_ExtendClassNameList_Comma,

  -- 103. <Extend Class Name List> ::= <Extend Class Name> 
  Rule_ExtendClassNameList,

  -- 104. <Extend Class Name> ::= <Pkg> 
  Rule_ExtendClassName,

  -- 105. <Extend Class Name> ::= <Pkg> '<' <Extend Class Name List> '>' 
  Rule_ExtendClassName_Lt_Gt,

  -- 106. <CDecls> ::= <CDecl> <CDecls> 
  Rule_CDecls,

  -- 107. <CDecls> ::=  
  Rule_CDecls2,

  -- 108. <ACDecls> ::= <ACDecl> <ACDecls> 
  Rule_ACDecls,

  -- 109. <ACDecls> ::=  
  Rule_ACDecls2,

  -- 110. <CDecl> ::= <CFunc Decl> 
  Rule_CDecl,

  -- 111. <CDecl> ::= <CVar Decl> 
  Rule_CDecl2,

  -- 112. <CDecl> ::= <Operator Impl> 
  Rule_CDecl3,

  -- 113. <ACDecl> ::= <CFunc Decl> 
  Rule_ACDecl,

  -- 114. <ACDecl> ::= <CFunc Proto> 
  Rule_ACDecl2,

  -- 115. <ACDecl> ::= <CVar Decl> 
  Rule_ACDecl3,

  -- 116. <ACDecl> ::= <Operator Impl> 
  Rule_ACDecl4,

  -- 117. <ACDecl> ::= <Operator Proto> 
  Rule_ACDecl5,

  -- 118. <Operator Impl> ::= operator <Operator> <Op Header Impl> '=' <Expr> 
  Rule_OperatorImpl_operator_Eq,

  -- 119. <Operator Impl> ::= operator <Operator> <Op Header Impl> <Block> 
  Rule_OperatorImpl_operator,

  -- 120. <Operator Proto> ::= operator <Operator> <Op Header Proto> 
  Rule_OperatorProto_operator,

  -- 121. <CDefStruct> ::= extern struct Id '{' <Params> '}' 
  Rule_CDefStruct_extern_struct_Id_LBrace_RBrace,

  -- 122. <Operator> ::= '+' 
  Rule_Operator_Plus,

  -- 123. <Operator> ::= '-' 
  Rule_Operator_Minus,

  -- 124. <Operator> ::= '*' 
  Rule_Operator_Times,

  -- 125. <Operator> ::= '/' 
  Rule_Operator_Div,

  -- 126. <Operator> ::= '%' 
  Rule_Operator_Percent,

  -- 127. <Operator> ::= '^' 
  Rule_Operator_Caret,

  -- 128. <Operator> ::= '&' 
  Rule_Operator_Amp,

  -- 129. <Operator> ::= '|' 
  Rule_Operator_Pipe,

  -- 130. <Operator> ::= '~' 
  Rule_Operator_Tilde,

  -- 131. <Operator> ::= '!' 
  Rule_Operator_Exclam,

  -- 132. <Operator> ::= '=' 
  Rule_Operator_Eq,

  -- 133. <Operator> ::= '<' 
  Rule_Operator_Lt,

  -- 134. <Operator> ::= '>' 
  Rule_Operator_Gt,

  -- 135. <Operator> ::= '+=' 
  Rule_Operator_PlusEq,

  -- 136. <Operator> ::= '-=' 
  Rule_Operator_MinusEq,

  -- 137. <Operator> ::= '*=' 
  Rule_Operator_TimesEq,

  -- 138. <Operator> ::= '/=' 
  Rule_Operator_DivEq,

  -- 139. <Operator> ::= '%=' 
  Rule_Operator_PercentEq,

  -- 140. <Operator> ::= '^=' 
  Rule_Operator_CaretEq,

  -- 141. <Operator> ::= '&=' 
  Rule_Operator_AmpEq,

  -- 142. <Operator> ::= '|=' 
  Rule_Operator_PipeEq,

  -- 143. <Operator> ::= '<<' 
  Rule_Operator_LtLt,

  -- 144. <Operator> ::= '>>' 
  Rule_Operator_GtGt,

  -- 145. <Operator> ::= '>>=' 
  Rule_Operator_GtGtEq,

  -- 146. <Operator> ::= '<<=' 
  Rule_Operator_LtLtEq,

  -- 147. <Operator> ::= '==' 
  Rule_Operator_EqEq,

  -- 148. <Operator> ::= '!=' 
  Rule_Operator_ExclamEq,

  -- 149. <Operator> ::= '<=' 
  Rule_Operator_LtEq,

  -- 150. <Operator> ::= '>=' 
  Rule_Operator_GtEq,

  -- 151. <Operator> ::= '&&' 
  Rule_Operator_AmpAmp,

  -- 152. <Operator> ::= '||' 
  Rule_Operator_PipePipe,

  -- 153. <Operator> ::= '++' 
  Rule_Operator_PlusPlus,

  -- 154. <Operator> ::= '--' 
  Rule_Operator_MinusMinus,

  -- 155. <Operator> ::= ',' 
  Rule_Operator_Comma,

  -- 156. <Operator> ::= '(' ')' 
  Rule_Operator_LParen_RParen,

  -- 157. <Operator> ::= '[' ']' 
  Rule_Operator_LBracket_RBracket,

  -- 158. <Op Header Proto> ::= '(' <Params> ')' 
  Rule_OpHeaderProto_LParen_RParen,

  -- 159. <Op Header Proto> ::= '(' <Params> ')' '->' <Type> 
  Rule_OpHeaderProto_LParen_RParen_MinusGt,

  -- 160. <Op Header Proto> ::= '(' <Types> ')' 
  Rule_OpHeaderProto_LParen_RParen2,

  -- 161. <Op Header Proto> ::= '(' <Types> ')' '->' <Type> 
  Rule_OpHeaderProto_LParen_RParen_MinusGt2,

  -- 162. <Op Header Proto> ::= '(' ')' 
  Rule_OpHeaderProto_LParen_RParen3,

  -- 163. <Op Header Proto> ::= '(' ')' '->' <Type> 
  Rule_OpHeaderProto_LParen_RParen_MinusGt3,

  -- 164. <Op Header Impl> ::= '(' <Params> ')' 
  Rule_OpHeaderImpl_LParen_RParen,

  -- 165. <Op Header Impl> ::= '(' <Params> ')' '->' <Type> 
  Rule_OpHeaderImpl_LParen_RParen_MinusGt,

  -- 166. <Op Header Impl> ::= '(' ')' 
  Rule_OpHeaderImpl_LParen_RParen2,

  -- 167. <Op Header Impl> ::= '(' ')' '->' <Type> 
  Rule_OpHeaderImpl_LParen_RParen_MinusGt2,

  -- 168. <Var Decl> ::= let final <Var Header> 
  Rule_VarDecl_let_final,

  -- 169. <Var Decl> ::= let <Var Header> 
  Rule_VarDecl_let,

  -- 170. <Var Decl> ::= let local <Var Header> 
  Rule_VarDecl_let_local,

  -- 171. <Var Decl> ::= let local final <Var Header> 
  Rule_VarDecl_let_local_final,

  -- 172. <Var Decl> ::= let final local <Var Header> 
  Rule_VarDecl_let_final_local,

  -- 173. <Var Decl> ::= let atomic <Var Header> 
  Rule_VarDecl_let_atomic,

  -- 174. <Var Decl> ::= let local atomic <Var Header> 
  Rule_VarDecl_let_local_atomic,

  -- 175. <Var Decl> ::= let atomic local <Var Header> 
  Rule_VarDecl_let_atomic_local,

  -- 176. <CVar Decl> ::= let <Var Header> 
  Rule_CVarDecl_let,

  -- 177. <CVar Decl> ::= let final <Var Header> 
  Rule_CVarDecl_let_final,

  -- 178. <CVar Decl> ::= let final static <Var Header> 
  Rule_CVarDecl_let_final_static,

  -- 179. <CVar Decl> ::= let final <Visibility> <Var Header> 
  Rule_CVarDecl_let_final2,

  -- 180. <CVar Decl> ::= let final <Visibility> static <Var Header> 
  Rule_CVarDecl_let_final_static2,

  -- 181. <CVar Decl> ::= let final static <Visibility> <Var Header> 
  Rule_CVarDecl_let_final_static3,

  -- 182. <CVar Decl> ::= let static <Var Header> 
  Rule_CVarDecl_let_static,

  -- 183. <CVar Decl> ::= let static final <Var Header> 
  Rule_CVarDecl_let_static_final,

  -- 184. <CVar Decl> ::= let static atomic <Var Header> 
  Rule_CVarDecl_let_static_atomic,

  -- 185. <CVar Decl> ::= let static <Visibility> <Var Header> 
  Rule_CVarDecl_let_static2,

  -- 186. <CVar Decl> ::= let static <Visibility> atomic <Var Header> 
  Rule_CVarDecl_let_static_atomic2,

  -- 187. <CVar Decl> ::= let static <Visibility> final <Var Header> 
  Rule_CVarDecl_let_static_final2,

  -- 188. <CVar Decl> ::= let static atomic <Visibility> <Var Header> 
  Rule_CVarDecl_let_static_atomic3,

  -- 189. <CVar Decl> ::= let <Visibility> <Var Header> 
  Rule_CVarDecl_let2,

  -- 190. <CVar Decl> ::= let <Visibility> static <Var Header> 
  Rule_CVarDecl_let_static3,

  -- 191. <CVar Decl> ::= let <Visibility> static atomic <Var Header> 
  Rule_CVarDecl_let_static_atomic4,

  -- 192. <CVar Decl> ::= let <Visibility> final <Var Header> 
  Rule_CVarDecl_let_final3,

  -- 193. <CVar Decl> ::= let <Visibility> static final <Var Header> 
  Rule_CVarDecl_let_static_final3,

  -- 194. <CVar Decl> ::= let <Visibility> final static <Var Header> 
  Rule_CVarDecl_let_final_static4,

  -- 195. <CVar Decl> ::= let <Visibility> atomic static 
  Rule_CVarDecl_let_atomic_static,

  -- 196. <CVar Decl> ::= let atomic <Var Header> 
  Rule_CVarDecl_let_atomic,

  -- 197. <CVar Decl> ::= let atomic <Visibility> <Var Header> 
  Rule_CVarDecl_let_atomic2,

  -- 198. <CVar Decl> ::= let atomic static <Var Header> 
  Rule_CVarDecl_let_atomic_static2,

  -- 199. <CVar Decl> ::= let atomic <Visibility> static <Var Header> 
  Rule_CVarDecl_let_atomic_static3,

  -- 200. <CVar Decl> ::= let atomic static <Visibility> <Var Header> 
  Rule_CVarDecl_let_atomic_static4,

  -- 201. <Var Header> ::= <Id List> ':' <Type> '=' <CSE> 
  Rule_VarHeader_Colon_Eq,

  -- 202. <Var Header> ::= <Id List> ':' <Type> 
  Rule_VarHeader_Colon,

  -- 203. <Var Header> ::= <Id List> '=' <CSE> 
  Rule_VarHeader_Eq,

  -- 204. <Enum Decl> ::= enum Id '{' <Enum Def> '}' 
  Rule_EnumDecl_enum_Id_LBrace_RBrace,

  -- 205. <Enum Decl> ::= local enum Id '{' <Enum Def> '}' 
  Rule_EnumDecl_local_enum_Id_LBrace_RBrace,

  -- 206. <Enum Def> ::= Id ',' <Enum Def> 
  Rule_EnumDef_Id_Comma,

  -- 207. <Enum Def> ::= Id 
  Rule_EnumDef_Id,

  -- 208. <Type> ::= <Base> 
  Rule_Type,

  -- 209. <Type> ::= <Fn Type> 
  Rule_Type2,

  -- 210. <Type> ::= <Pkg Template> 
  Rule_Type3,

  -- 211. <Type> ::= <Type> '[' ']' 
  Rule_Type_LBracket_RBracket,

  -- 212. <Type> ::= '(' <Types> ')' 
  Rule_Type_LParen_RParen,

  -- 213. <Fn Type> ::= fn '(' ')' 
  Rule_FnType_fn_LParen_RParen,

  -- 214. <Fn Type> ::= fn '(' ')' '->' <Type> 
  Rule_FnType_fn_LParen_RParen_MinusGt,

  -- 215. <Fn Type> ::= fn '(' <Types> ')' 
  Rule_FnType_fn_LParen_RParen2,

  -- 216. <Fn Type> ::= fn '(' <Types> ')' '->' <Type> 
  Rule_FnType_fn_LParen_RParen_MinusGt2,

  -- 217. <Pkg Template> ::= <Pkg> 
  Rule_PkgTemplate,

  -- 218. <Pkg Template> ::= <Pkg> '<' <Types> '>' 
  Rule_PkgTemplate_Lt_Gt,

  -- 219. <Base> ::= <Sign> <Scalar> 
  Rule_Base,

  -- 220. <Base> ::= 'size_t' 
  Rule_Base_size_t,

  -- 221. <Base> ::= byte 
  Rule_Base_byte,

  -- 222. <Base> ::= float 
  Rule_Base_float,

  -- 223. <Base> ::= double 
  Rule_Base_double,

  -- 224. <Base> ::= bool 
  Rule_Base_bool,

  -- 225. <Base> ::= long double 
  Rule_Base_long_double,

  -- 226. <Sign> ::= signed 
  Rule_Sign_signed,

  -- 227. <Sign> ::= unsigned 
  Rule_Sign_unsigned,

  -- 228. <Sign> ::=  
  Rule_Sign,

  -- 229. <Scalar> ::= char 
  Rule_Scalar_char,

  -- 230. <Scalar> ::= int 
  Rule_Scalar_int,

  -- 231. <Scalar> ::= short 
  Rule_Scalar_short,

  -- 232. <Scalar> ::= long 
  Rule_Scalar_long,

  -- 233. <Scalar> ::= short int 
  Rule_Scalar_short_int,

  -- 234. <Scalar> ::= long int 
  Rule_Scalar_long_int,

  -- 235. <Stm> ::= <Var Decl> 
  Rule_Stm,

  -- 236. <Stm> ::= <If Stm> 
  Rule_Stm2,

  -- 237. <Stm> ::= while <Expr> <Block> 
  Rule_Stm_while,

  -- 238. <Stm> ::= for <Arg> ';' <Arg> ';' <Arg> <Block> 
  Rule_Stm_for_Semi_Semi,

  -- 239. <Stm> ::= foreach <Param> in <Expr> <Block> 
  Rule_Stm_foreach_in,

  -- 240. <Stm> ::= <Normal Stm> 
  Rule_Stm3,

  -- 241. <Using Stm> ::= using <Pkg> 
  Rule_UsingStm_using,

  -- 242. <Using Stms> ::= <Using Stm> <Using Stms> 
  Rule_UsingStms,

  -- 243. <Using Stms> ::=  
  Rule_UsingStms2,

  -- 244. <Pkg> ::= Id '.' <Pkg> 
  Rule_Pkg_Id_Dot,

  -- 245. <Pkg> ::= Id 
  Rule_Pkg_Id,

  -- 246. <Pkg List> ::= <Pkg> ',' <Pkg List> 
  Rule_PkgList_Comma,

  -- 247. <Pkg List> ::= <Pkg> 
  Rule_PkgList,

  -- 248. <If Stm> ::= if <Expr> <Block> <else-if> 
  Rule_IfStm_if,

  -- 249. <else-if> ::= else if <Expr> <Block> <else-if> 
  Rule_elseif_else_if,

  -- 250. <else-if> ::= else <Block> 
  Rule_elseif_else,

  -- 251. <else-if> ::=  
  Rule_elseif,

  -- 252. <Normal Stm> ::= do <Block> while <Expr> 
  Rule_NormalStm_do_while,

  -- 253. <Normal Stm> ::= match <Expr> '{' <Case Stms> '}' 
  Rule_NormalStm_match_LBrace_RBrace,

  -- 254. <Normal Stm> ::= <Block> 
  Rule_NormalStm,

  -- 255. <Normal Stm> ::= <Expr> 
  Rule_NormalStm2,

  -- 256. <Normal Stm> ::= break 
  Rule_NormalStm_break,

  -- 257. <Normal Stm> ::= continue 
  Rule_NormalStm_continue,

  -- 258. <Normal Stm> ::= return <Expr> 
  Rule_NormalStm_return,

  -- 259. <Normal Stm> ::= return 
  Rule_NormalStm_return2,

  -- 260. <Normal Stm> ::= ';' 
  Rule_NormalStm_Semi,

  -- 261. <Arg> ::= <Expr> 
  Rule_Arg,

  -- 262. <Arg> ::=  
  Rule_Arg2,

  -- 263. <Case Stms> ::= case <Expr> when <Expr> <Block> <Case Stms> 
  Rule_CaseStms_case_when,

  -- 264. <Case Stms> ::= case <Expr> <Block> <Case Stms> 
  Rule_CaseStms_case,

  -- 265. <Case Stms> ::= else <Block> 
  Rule_CaseStms_else,

  -- 266. <Block> ::= '{' <Using Stms> <Stm List> '}' 
  Rule_Block_LBrace_RBrace,

  -- 267. <Block> ::= synchronized '{' <Using Stms> <Stm List> '}' 
  Rule_Block_synchronized_LBrace_RBrace,

  -- 268. <Stm List> ::= <Stm> <Stm List> 
  Rule_StmList,

  -- 269. <Stm List> ::=  
  Rule_StmList2,

  -- 270. <CSE> ::= <Expr> 
  Rule_CSE,

  -- 271. <CSE> ::= <CSE> ',' <Expr> 
  Rule_CSE_Comma,

  -- 272. <Expr> ::= <Var Decl> in <Expr> 
  Rule_Expr_in,

  -- 273. <Expr> ::= match <Expr> '{' <Case Exprs> '}' 
  Rule_Expr_match_LBrace_RBrace,

  -- 274. <Expr> ::= <Op Assign> 
  Rule_Expr,

  -- 275. <Op Assign> ::= <Op Or> '=' <Op Assign> 
  Rule_OpAssign_Eq,

  -- 276. <Op Assign> ::= <Op Or> '+=' <Op Assign> 
  Rule_OpAssign_PlusEq,

  -- 277. <Op Assign> ::= <Op Or> '-=' <Op Assign> 
  Rule_OpAssign_MinusEq,

  -- 278. <Op Assign> ::= <Op Or> '*=' <Op Assign> 
  Rule_OpAssign_TimesEq,

  -- 279. <Op Assign> ::= <Op Or> '/=' <Op Assign> 
  Rule_OpAssign_DivEq,

  -- 280. <Op Assign> ::= <Op Or> '%=' <Op Assign> 
  Rule_OpAssign_PercentEq,

  -- 281. <Op Assign> ::= <Op Or> '^=' <Op Assign> 
  Rule_OpAssign_CaretEq,

  -- 282. <Op Assign> ::= <Op Or> '&=' <Op Assign> 
  Rule_OpAssign_AmpEq,

  -- 283. <Op Assign> ::= <Op Or> '|=' <Op Assign> 
  Rule_OpAssign_PipeEq,

  -- 284. <Op Assign> ::= <Op Or> '>>=' <Op Assign> 
  Rule_OpAssign_GtGtEq,

  -- 285. <Op Assign> ::= <Op Or> '<<=' <Op Assign> 
  Rule_OpAssign_LtLtEq,

  -- 286. <Op Assign> ::= <Op Or> 
  Rule_OpAssign,

  -- 287. <Op Or> ::= <Op Or> '||' <Op And> 
  Rule_OpOr_PipePipe,

  -- 288. <Op Or> ::= <Op And> 
  Rule_OpOr,

  -- 289. <Op And> ::= <Op And> '&&' <Op BinOR> 
  Rule_OpAnd_AmpAmp,

  -- 290. <Op And> ::= <Op BinOR> 
  Rule_OpAnd,

  -- 291. <Op BinOR> ::= <Op BinOR> '|' <Op BinXOR> 
  Rule_OpBinOR_Pipe,

  -- 292. <Op BinOR> ::= <Op BinXOR> 
  Rule_OpBinOR,

  -- 293. <Op BinXOR> ::= <Op BinXOR> '^' <Op BinAND> 
  Rule_OpBinXOR_Caret,

  -- 294. <Op BinXOR> ::= <Op BinAND> 
  Rule_OpBinXOR,

  -- 295. <Op BinAND> ::= <Op BinAND> '&' <Op Equate> 
  Rule_OpBinAND_Amp,

  -- 296. <Op BinAND> ::= <Op Equate> 
  Rule_OpBinAND,

  -- 297. <Op Equate> ::= <Op Equate> '==' <Op Compare> 
  Rule_OpEquate_EqEq,

  -- 298. <Op Equate> ::= <Op Equate> '!=' <Op Compare> 
  Rule_OpEquate_ExclamEq,

  -- 299. <Op Equate> ::= <Op Compare> 
  Rule_OpEquate,

  -- 300. <Op Compare> ::= <Op Compare> '<' <Op Shift> 
  Rule_OpCompare_Lt,

  -- 301. <Op Compare> ::= <Op Compare> '>' <Op Shift> 
  Rule_OpCompare_Gt,

  -- 302. <Op Compare> ::= <Op Compare> '<=' <Op Shift> 
  Rule_OpCompare_LtEq,

  -- 303. <Op Compare> ::= <Op Compare> '>=' <Op Shift> 
  Rule_OpCompare_GtEq,

  -- 304. <Op Compare> ::= <Op Compare> is <Type> 
  Rule_OpCompare_is,

  -- 305. <Op Compare> ::= <Op Shift> 
  Rule_OpCompare,

  -- 306. <Op Shift> ::= <Op Shift> '<<' <Op Add> 
  Rule_OpShift_LtLt,

  -- 307. <Op Shift> ::= <Op Shift> '>>' <Op Add> 
  Rule_OpShift_GtGt,

  -- 308. <Op Shift> ::= <Op Add> 
  Rule_OpShift,

  -- 309. <Op Add> ::= <Op Add> '+' <Op Mult> 
  Rule_OpAdd_Plus,

  -- 310. <Op Add> ::= <Op Add> '-' <Op Mult> 
  Rule_OpAdd_Minus,

  -- 311. <Op Add> ::= <Op Mult> 
  Rule_OpAdd,

  -- 312. <Op Mult> ::= <Op Mult> '*' <Op Unary> 
  Rule_OpMult_Times,

  -- 313. <Op Mult> ::= <Op Mult> '/' <Op Unary> 
  Rule_OpMult_Div,

  -- 314. <Op Mult> ::= <Op Mult> '%' <Op Unary> 
  Rule_OpMult_Percent,

  -- 315. <Op Mult> ::= <Op Unary> 
  Rule_OpMult,

  -- 316. <Op Unary> ::= '!' <Op Unary> 
  Rule_OpUnary_Exclam,

  -- 317. <Op Unary> ::= '~' <Op Unary> 
  Rule_OpUnary_Tilde,

  -- 318. <Op Unary> ::= '-' <Op Unary> 
  Rule_OpUnary_Minus,

  -- 319. <Op Unary> ::= '++' <Op Unary> 
  Rule_OpUnary_PlusPlus,

  -- 320. <Op Unary> ::= '--' <Op Unary> 
  Rule_OpUnary_MinusMinus,

  -- 321. <Op Unary> ::= <Op Pointer> '++' 
  Rule_OpUnary_PlusPlus2,

  -- 322. <Op Unary> ::= <Op Pointer> '--' 
  Rule_OpUnary_MinusMinus2,

  -- 323. <Op Unary> ::= <Op Unary> as <Type> 
  Rule_OpUnary_as,

  -- 324. <Op Unary> ::= <New Expr> 
  Rule_OpUnary,

  -- 325. <Op Unary> ::= delete <Op Pointer> 
  Rule_OpUnary_delete,

  -- 326. <Op Unary> ::= sizeof '(' <Type> ')' 
  Rule_OpUnary_sizeof_LParen_RParen,

  -- 327. <Op Unary> ::= <Op Pointer> 
  Rule_OpUnary2,

  -- 328. <Op Pointer> ::= <Op Pointer> '.' <Value> 
  Rule_OpPointer_Dot,

  -- 329. <Op Pointer> ::= <Op Pointer> '[' <CSE> ']' 
  Rule_OpPointer_LBracket_RBracket,

  -- 330. <Op Pointer> ::= <Op Pointer> '(' <CSE> ')' 
  Rule_OpPointer_LParen_RParen,

  -- 331. <Op Pointer> ::= <Op Pointer> '(' ')' 
  Rule_OpPointer_LParen_RParen2,

  -- 332. <Op Pointer> ::= <Value> 
  Rule_OpPointer,

  -- 333. <Value> ::= OctLiteral 
  Rule_Value_OctLiteral,

  -- 334. <Value> ::= HexLiteral 
  Rule_Value_HexLiteral,

  -- 335. <Value> ::= DecLiteral 
  Rule_Value_DecLiteral,

  -- 336. <Value> ::= BinLiteral 
  Rule_Value_BinLiteral,

  -- 337. <Value> ::= StringLiteral 
  Rule_Value_StringLiteral,

  -- 338. <Value> ::= CharLiteral 
  Rule_Value_CharLiteral,

  -- 339. <Value> ::= FloatLiteral 
  Rule_Value_FloatLiteral,

  -- 340. <Value> ::= null 
  Rule_Value_null,

  -- 341. <Value> ::= '_' 
  Rule_Value__,

  -- 342. <Value> ::= true 
  Rule_Value_true,

  -- 343. <Value> ::= false 
  Rule_Value_false,

  -- 344. <Value> ::= <Pkg> 
  Rule_Value,

  -- 345. <Value> ::= <Lambda Expr> 
  Rule_Value2,

  -- 346. <Value> ::= '(' <CSE> ')' 
  Rule_Value_LParen_RParen,

  -- 347. <Value> ::= '[' for Id ':' <Type> in <Expr> '=>' <Expr> ']' 
  Rule_Value_LBracket_for_Id_Colon_in_EqGt_RBracket,

  -- 348. <Value> ::= '[' for Id in <Expr> '=>' <Expr> ']' 
  Rule_Value_LBracket_for_Id_in_EqGt_RBracket,

  -- 349. <Value> ::= '[' for Id ':' <Type> in <Expr> if <Expr> '=>' <Expr> ']' 
  Rule_Value_LBracket_for_Id_Colon_in_if_EqGt_RBracket,

  -- 350. <Value> ::= '[' for Id in <Expr> if <Expr> '=>' <Expr> ']' 
  Rule_Value_LBracket_for_Id_in_if_EqGt_RBracket,

  -- 351. <Value> ::= '[' <CSE> ']' 
  Rule_Value_LBracket_RBracket,

  -- 352. <Lambda Expr> ::= lambda '(' <Params> ')' <Block> 
  Rule_LambdaExpr_lambda_LParen_RParen,

  -- 353. <Lambda Expr> ::= lambda '(' <Params> ')' '=' <Expr> 
  Rule_LambdaExpr_lambda_LParen_RParen_Eq,

  -- 354. <Lambda Expr> ::= lambda '(' <Params> ')' '->' <Type> <Block> 
  Rule_LambdaExpr_lambda_LParen_RParen_MinusGt,

  -- 355. <Lambda Expr> ::= lambda '(' <Params> ')' '->' <Type> '=' <Expr> 
  Rule_LambdaExpr_lambda_LParen_RParen_MinusGt_Eq,

  -- 356. <Case Exprs> ::= case <Expr> when <Expr> '=>' <Expr> <Case Exprs> 
  Rule_CaseExprs_case_when_EqGt,

  -- 357. <Case Exprs> ::= case <Expr> '=>' <Expr> <Case Exprs> 
  Rule_CaseExprs_case_EqGt,

  -- 358. <Case Exprs> ::= else '=>' <Expr> 
  Rule_CaseExprs_else_EqGt,

  -- 359. <New Expr> ::= new <Pkg Template> '(' ')' 
  Rule_NewExpr_new_LParen_RParen,

  -- 360. <New Expr> ::= new <Pkg Template> '(' <Expr> ')' 
  Rule_NewExpr_new_LParen_RParen2,

  -- 361. <New Expr> ::= new <Pkg Template> '(' ')' '{' <CDecl> '}' 
  Rule_NewExpr_new_LParen_RParen_LBrace_RBrace,

  -- 362. <New Expr> ::= new <Pkg Template> '(' <Expr> ')' '{' <CDecl> '}' 
  Rule_NewExpr_new_LParen_RParen_LBrace_RBrace2,

  -- 363. <New Expr> ::= new <Type> 
  Rule_NewExpr_new,

  -- 364. <New Expr> ::= new <Type> '[' <Expr> ']' 
  Rule_NewExpr_new_LBracket_RBracket 
}

assert(expr.rule >= 0)

local token ={
  type = "__pkg",
  vars = {},
  funcs = {},
  classes = {},
  enums = {}
}

ruleJumpTable[expr.rule](token, expr)