! -----------------------------------------------------------------------
! berserk programming language
!
! A general purpose multiparadigms programming language
! -----------------------------------------------------------------------


"Name"    = 'berserk' 
"Version" = '2016'
"Author"  = 'Soulaymen Chouri' 
"About"   = 'High level programming language'

"Case Sensitive" = True
"Start Symbol"   = <Decls>

{Hex Digit}      = {Digit} + [abcdefABCDEF]
{Oct Digit}      = [01234567]
{Bin Digit}      = [01]
                 
{Id Head}        = {Letter} + [_]
{Id Tail}        = {Id Head} + {Digit}

{String Ch}      = {Printable} - ["]
{Char Ch}        = {Printable} - ['']

DecLiteral       = [123456789]{digit}*
BinLiteral       = 0b{Bin Digit}*
OctLiteral       = 0{Oct Digit}*
HexLiteral       = 0x{Hex Digit}+
                 
FloatLiteral     = {Digit}*'.'{Digit}+

StringLiteral    = '"'( {String Ch} | '\'{Printable} )* '"'
CharLiteral      = '' ( {Char Ch} | '\'{Printable} )''

Id               = {Id Head}{Id Tail}*


! ===================================================================
! Comments
! ===================================================================

Comment Start = '/*'
Comment End   = '*/'
Comment Line  = '//'


! Typically, berserk comments cannot be nested. As a result, the 
! Comment Start and Comment End terminals cannot be used.
!
! To implement non-nested comments, the whitespace terminal is
! modified to accept them. In the definition below, Whitespace 
! is defined as one or more {Whitespace} characters OR a series
! of characters delimited by /* and */. Note that the characters
! between the two delimiters cannot contain the */ sequence. 
!
! Uncomment the following to prevent block commments. Make sure 
! to comment the Comment Start and Comment End definitions.
!
! {Non Slash}     = {Printable} - [/]  
! {Non Asterisk}  = {Printable} - [*]
! 
! Whitespace     = {Whitespace}+   
!                | '/*' (  {Non Asterisk} | '*' {Non Slash}? )*  '*/'

!=======================================================

<Decls> ::= <Imports> <Using Stms> <Decl List>
          | 

<Decl List> ::= <Decl> <Decl List>
              | <Decl>

<Decl>  ::= <Func Decl>
          | <Class Decl>
          | <Enum Decl>
          | extern type Id
          | local extern type Id
          | extern local type Id
          | <Var Decl>   
          | <CDefFunc Decl>        
          !| <Using Stm>  not anymore!
          !| <CDefStruct>
          !| <Set Decl>
          
<Imports> ::= <Import> <Imports>
            |

<Import> ::= import <File Path All>
           | import <File Path> as Id
           | from <File Path> import <File Path List>
          
<File Path> ::= ID '.' <File Path>             
              | ID

<File Path All> ::= ID '.' <File Path All>
                  | ID '.*'
                  | ID

<File Path List> ::= <File Path> ',' <File Path List>
                   | <File Path>
              
! ===================================================================
! Function  Declaration
! ===================================================================

<Fn Header Proto> ::= Id '(' <Params> ')' 
                    | Id '(' <Params> ')' '->' <Type>
                    | Id '(' <Types> ')'
                    | Id '(' <Types> ')' '->' <Type>
                    | Id '(' ')'
                    | Id '(' ')' '->' <type>

<Fn Header Impl> ::= Id '(' <Params> ')' 
                   | Id '(' <Params> ')' '->' <Type>
                   | Id '(' ')'
                   | Id '(' ')' '->' <type>

<Func Decl>  ::= function <Fn Header Impl> <Func Body>
               | local function <Fn Header Impl> <Func Body>
               | synchronized function <Fn Header Impl> <Func Body>
               | synchronized local function <Fn Header Impl> <Func Body>
               | local synchronized function <Fn Header Impl> <Func Body>
               | pure function <Fn Header Impl> <Func Body>
               | local pure function <Fn Header Impl> <Func Body>
               | pure local function <Fn Header Impl> <Func Body>

<Func Body> ::= '=' <Expr>
              | <Block>

<CFunc Proto> ::= function <Fn Header Proto>
                !
                | pure function <Fn Header Proto>
                | static function <Fn Header Proto>
                | <Visibility> function <Fn Header Proto>
                | inherited function <Fn Header Proto>
                !               
                | pure static function <Fn Header Proto>
                | pure <Visibility> function <Fn Header Proto>
                | pure inherited function <Fn Header Proto>
                !
                | static pure <Fn Header Proto>
                | static <Visibility> <Fn Header Proto>
                | static inherited <Fn Header Proto>
                !
                | <Visibility> pure <Fn Header Proto>
                | <Visibility> static <Fn Header Proto>
                | <Visibility> inherited <Fn Header Proto>
                !
                | inherited pure <Fn Header Proto>
                | inherited <Visibility> <Fn Header Proto>
                | inherited static <Fn Header Proto>
                !
                | pure static <Visibility> <Fn Header Proto>
                ! pure static inherited   << does not make any sense .. just so i dont mess combinations
                | pure <Visibility> static <Fn Header Proto>
                | pure <Visibility> inherited <Fn Header Proto>
                | pure inherited <Visibility> <Fn Header Proto>
                ! pure inherited static   << does name make any sense as well 
                ! 
                ! static pure inherited 
                | static pure <Visibility> <Fn Header Proto>
                | static <Visibility> pure <Fn Header Proto>
                | static <Visibility> inherited <Fn Header Proto>
                ! static inherited pure
                | static inherited <Visibility> <Fn Header Proto>
                !
                | inherited <Visibility> pure <Fn Header Proto>
                ! inherited <Visibility> static
                | inherited pure <Visibility> <Fn Header Proto>
                | inherited pure static <Fn Header Proto>

<CFunc Decl>  ::= <CFunc Proto> <Func Body>
        
<CDefFunc Decl> ::= extern function <Fn Header Proto>
                  | extern pure function <Fn Header Proto>
                  | extern local function <Fn Header Proto>
                  | local extern function <Fn Header Proto>
                  | local pure extern function <Fn Header Proto>
                  | local extern pure function <Fn Header Proto>
                  | pure extern function <Fn Header Proto>
                  | pure local extern function <Fn Header Proto>
                  | pure extern local function <Fn Header Proto>

<Visibility> ::= public 
               | private
               | protected
    
<Params>     ::= <Param> ',' <Params>
               | <Param>
               
<Param>      ::= final ID ':' <Type>
               |       ID ':' <Type>
               
<Types>      ::= <Type>  ',' <Types>
               | <Type> 
   
<Id List>    ::= Id ',' <Id List>
               | Id
          

! ===================================================================
! Class Declaration
! ===================================================================

<Class Decl>  ::= <Normal Class>
                | <Abstract Class>
                | local <Normal Class>
                | local <Abstract Class>


<Normal Class> ::= class <Class Name> '{' <CDecls> '}' 
                 | class <Class Name> extends <Extend Class Name List> '{' <CDecls> '}'
            
<Abstract Class> ::= abstract class <Class Name> '{' <ACDecls> '}' 
                   | abstract class <Class Name> extends <Extend Class Name List> '{' <ACDecls> '}'
            
<Class Name> ::= Id
               | Id '<' <Id List> '>'

<Extend Class Name List> ::= <Extend Class Name> ',' <Extend Class Name List>
                           | <Extend Class Name>  
                           
<Extend Class Name> ::= <Pkg>
                      | <Pkg> '<' <Extend Class Name List> '>'

<CDecls> ::= <CDecl> <CDecls>
           |

<ACDecls> ::= <ACDecl> <ACDecls>
            |
            
! Normal class decl           
<CDecl> ::= <CFunc Decl>
          | <CVar Decl>   
          | <Operator Impl>

! abstract class decl
<ACDecl>::= <CFunc Decl>
          | <CFunc Proto>
          | <CVar Decl>  
          | <Operator Impl>
          | <Operator Proto>
          
<Operator Impl> ::= operator <Operator> <Op Header Impl> '=' <Expr> 
                  | operator <Operator> <Op Header Impl> <Block>

<Operator Proto> ::= operator <Operator> <Op Header Proto>

<CDefStruct> ::= extern struct Id  '{' <Params> '}'
              
<Operator> ::= '+' | '-' | '*' | '/' | '%' | '^'  | '&' | '|' | '~' | '!' | '=' | '<' | '>' | '+=' | '-=' 
             | '*=' | '/=' | '%=' | '^=' | '&=' | '|=' | '<<' | '>>' | '>>=' | '<<=' | '==' | '!=' | '<=' 
             | '>=' | '&&' | '||' | '++' | '--' | ','  | '(' ')' | '[' ']' 
   
<Op Header Proto> ::= '(' <Params> ')' 
                    | '(' <Params> ')' '->' <Type>
                    | '(' <Types> ')'
                    | '(' <Types> ')' '->' <Type>
                    | '(' ')'
                    | '(' ')' '->' <type>

<Op Header Impl> ::= '(' <Params> ')' 
                   | '(' <Params> ')' '->' <Type>
                   | '(' ')'
                   | '(' ')' '->' <type>
                        
! ===================================================================
! Variable Declaration
! ===================================================================

            
<Var Decl>     ::= let final <Var Header>
                 | let       <Var Header>
                 | let local <Var Header>
                 | let local final <Var Header>
                 | let final local <Var Header>
                 | let atomic <Var Header>
                 | let local atomic <Var Header>
                 | let atomic local <Var Header>

<CVar Decl>     ::= let <Var Header>
                  | let final <Var Header>
                  | let final static <Var Header>
                  | let final <Visibility> <Var Header>
                  | let final <Visibility> static <Var Header>
                  | let final static <Visibility> <Var Header>
                  !
                  | let static <Var Header>
                  | let static final <Var Header>
                  | let static atomic <Var Header>
                  | let static <Visibility> <Var Header>
                  | let static <Visibility> atomic <Var Header>
                  | let static <Visibility> final <Var Header>
                  | let static atomic <Visibility> <Var Header>
                  !
                  | let <Visibility> <Var Header>
                  | let <Visibility> static <Var Header>
                  | let <Visibility> static atomic <Var Header>
                  | let <Visibility> final <Var Header>
                  | let <Visibility> static final <Var Header>
                  | let <Visibility> final static <Var Header>
                  | let <Visibility> atomic static
                  !
                  | let atomic <Var Header>
                  | let atomic <Visibility> <Var Header>
                  | let atomic static <Var Header>
                  | let atomic <Visibility> static <Var Header>
                  | let atomic static <Visibility> <Var Header>                                   
                  

<Var Header> ::= <Id List> ':' <Type> '=' <CSE>
               | <Id List> ':' <Type>
               | <Id List>            '=' <CSE>
             
! ===================================================================
! Enumerations and Sets
! ===================================================================

<Enum Decl>    ::= enum Id '{' <Enum Def> '}'  
                 | local enum Id '{' <Enum Def> '}'
 
<Enum Def>     ::= Id ',' <Enum Def>
                 | Id

!<Set Decl> ::= set Id '{' <Enum Def> '}'

! ===================================================================
! Types
! ===================================================================

<Type>     ::= <Base>
             | <Fn Type>
             | <Pkg Template>
             | <Type> '[' ']'
             | '(' <Types> ')' !Tuple

<Fn Type> ::= 'fn' '(' ')'
            | 'fn' '(' ')' '->' <type>
            | 'fn' '(' <Types>  ')'
            | 'fn' '(' <Types>  ')' '->' <Type>

<Pkg Template> ::= <Pkg> 
                 | <Pkg> '<' <Types> '>'

<Base>     ::= <Sign> <Scalar>
             | size_t
             | byte       
             | float
             | double
             | bool
             | long double

<Sign>     ::= signed 
             | unsigned
             |

<Scalar>   ::= char
             | int
             | short
             | long
             | short int
             | long int     

! ===================================================================
! Statements
! ===================================================================

<Stm>        ::= <Var Decl>
               | <If Stm>
               | while <Expr> <Block>
               | for <Arg> ';' <Arg> ';' <Arg> <Block>
               | foreach <Param> in <Expr> <Block>
               | <Normal Stm>

<Using Stm> ::= using <Pkg>

<Using Stms> ::= <Using Stm> <Using Stms>
               | 

<Pkg> ::= ID '.' <Pkg>
        | ID 

<If Stm> ::= if <Expr> <Block> <else-if>

<else-if> ::= else if <Expr> <Block> <else-if>
           |  else <Block>
           | 

           
<Normal Stm> ::= do <Block> while <Expr>
               | match <Expr> '{' <Case Stms> '}'
               | <Block>
               | <Expr>
               | break 
               | continue 
               | return <Expr> 
               | return
               | ';'              !Null statement


<Arg>       ::= <Expr> 
              | 

<Case Stms> ::= case <Expr> when <Expr> <Block> <Case Stms>
              | case <Expr>             <Block> <Case Stms>
              | else                    <Block>                          

<Block>     ::= '{' <Using Stms> <Stm List> '}' 
              | synchronized '{' <Using Stms> <Stm List> '}' 

<Stm List>  ::=  <Stm> <Stm List> 
              | 


! ===================================================================
! Here begins the berserk 15 levels of operator precedence.
! ===================================================================

! commar seperated expressions
<CSE> ::= <Expr>              
        | <CSE> ',' <Expr>   

<Expr>       ::= <Var Decl> in <Expr>
               !| <Func Decl> in <Expr> no nested function support
               | match <Expr> '{' <Case Exprs> '}'
               | <Op Assign>

<Op Assign>  ::= <Op Or> '='   <Op Assign>
               | <Op Or> '+='  <Op Assign>
               | <Op Or> '-='  <Op Assign>
               | <Op Or> '*='  <Op Assign>
               | <Op Or> '/='  <Op Assign>
               | <Op Or> '%='  <Op Assign>
               | <Op Or> '^='  <Op Assign>
               | <Op Or> '&='  <Op Assign>
               | <Op Or> '|='  <Op Assign>
               | <Op Or> '>>=' <Op Assign>
               | <Op Or> '<<=' <Op Assign>
               | <Op Or>

<Op Or>      ::= <Op Or> '||' <Op And>
               | <Op And>

<Op And>     ::= <Op And> '&&' <Op BinOR>
               | <Op BinOR>

<Op BinOR>   ::= <Op BinOr> '|' <Op BinXOR>
               | <Op BinXOR>

<Op BinXOR>  ::= <Op BinXOR> '^' <Op BinAND>
               | <Op BinAND>

<Op BinAND>  ::= <Op BinAND> '&' <Op Equate>
               | <Op Equate>

<Op Equate>  ::= <Op Equate> '==' <Op Compare>
               | <Op Equate> '!=' <Op Compare>
               | <Op Compare>

<Op Compare> ::= <Op Compare> '<'  <Op Shift>
               | <Op Compare> '>'  <Op Shift>
               | <Op Compare> '<=' <Op Shift>
               | <Op Compare> '>=' <Op Shift>
               | <Op Compare> is <Type>
               !| <Op Compare> in <Op Shift> confuses with let .. in
               | <Op Shift>

<Op Shift>   ::= <Op Shift> '<<' <Op Add>
               | <Op Shift> '>>' <Op Add>
               | <Op Add>

<Op Add>     ::= <Op Add> '+' <Op Mult>
               | <Op Add> '-' <Op Mult>
               | <Op Mult>

<Op Mult>    ::= <Op Mult> '*' <Op Unary>
               | <Op Mult> '/' <Op Unary>
               | <Op Mult> '%' <Op Unary>
               | <Op Unary>

<Op Unary>   ::= '!'    <Op Unary>
               | '~'    <Op Unary>   
               | '-'    <Op Unary>              
               | '++'   <Op Unary>
               | '--'   <Op Unary>
               | <Op Pointer> '++'
               | <Op Pointer> '--'
               | <Op Unary> as <Type>   !CAST
               | <New Expr>
               | delete <Op Pointer>
               | sizeof '(' <Type> ')'
               | <Op Pointer>

<Op Pointer> ::= <Op Pointer> '.' <Value>
               | <Op Pointer> '[' <CSE> ']'
               | <Op Pointer> '(' <CSE> ')'
               | <Op Pointer> '(' ')'    
               | <Value>

<Value>      ::= OctLiteral
               | HexLiteral
               | DecLiteral  
               | BinLiteral
               | StringLiteral
               | CharLiteral
               | FloatLiteral
               | null
               | _
               | true
               | false
               | <Pkg>
               | <Lambda Expr>  
               | '(' <CSE> ')'
               | '[' for Id ':' <Type> in <Expr> '=>' <Expr> ']'
               | '[' for Id            in <Expr> '=>' <Expr> ']'
               | '[' for Id ':' <Type> in <Expr> if <Expr> '=>' <Expr> ']'
               | '[' for Id            in <Expr> if <Expr> '=>' <Expr> ']'                  
               | '[' <CSE> ']'              
               
<Lambda Expr> ::= lambda '(' <Params> ')' <Block>
                | lambda '(' <Params> ')' '=' <Expr>
                | lambda '(' <Params> ')' '->' <Type> <Block>
                | lambda '(' <Params> ')' '->' <Type> '=' <Expr>

<Case Exprs> ::= case <Expr> when <Expr> '=>' <Expr> <Case Exprs>
               | case <Expr>             '=>' <Expr> <Case Exprs>
               | else                    '=>' <Expr>        
               
<New Expr> ::= new <Pkg Template> '('        ')'
             | new <Pkg Template> '(' <Expr> ')'
             | new <Pkg Template> '('        ')' '{' <CDecl> '}'!oh yeah, Java-style
             | new <Pkg Template> '(' <Expr> ')' '{' <CDecl> '}' 
             | new <Type> 
             | new <Type> '[' <Expr> ']'
